# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)

# this run definition will be choosen if no parameters are given to rebench.py
standard_run: all
standard_data_file: 'codespeed.data'
standard_experiment: SOMns

reporting:
    # results can also be reported to a codespeed instance
    # see: https://github.com/tobami/codespeed
    csv_file: latest-runs.csv
    csv_locale: de_DE.UTF-8
    codespeed:
        url: http://somns-speed.stefan-marr.de/result/add/json/

runs:
    number_of_data_points: 3

statistics:
    confidence_level: 0.95
 
# settings for quick runs, useful for fast feedback during experiments
quick_runs:
    number_of_data_points: 3
    max_time: 60   # time in seconds

# definition of benchmark suites
benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD " core-lib/Benchmarks/Harness.som %(benchmark)s "
        max_runtime: 600
        benchmarks:
            - Richards:
                extra_args: "1 0 1"
                codespeed_name: "[1st] Richards"
            - DeltaBlue:
                extra_args: "1 0 1000"
                codespeed_name: "[1st] DeltaBlue"
            - Mandelbrot:
                extra_args: "1 0 300"
                codespeed_name: "[1st] Mandelbrot"
            - NBody:
                extra_args: "1 0 30000"
                codespeed_name: "[1st] NBody"
            - Json:
                extra_args: "1 0 80"
                codespeed_name: "[1st] Json"
            - GraphSearch:
                extra_args: "1 0 30"
                codespeed_name: "[1st] GraphSearch"
            - PageRank:
                extra_args: "1 0 1400"
                codespeed_name: "[1st] PageRank"

    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 6000
        benchmarks:
            - Richards:
                extra_args: "130 0 60"
                codespeed_name: "[peak] Richards"
                warmup: 30
            - DeltaBlue:
                extra_args: "120 0 20000"
                codespeed_name: "[peak] DeltaBlue"
                warmup: 20
            - Mandelbrot:
                extra_args: "110 0 1000"
                codespeed_name: "[peak] Mandelbrot"
                warmup: 10
            - NBody:
                extra_args: "120 0 500000"
                codespeed_name: "[peak] NBody"
                warmup: 20
            - Json:
                extra_args: "120 0 80"
                codespeed_name: "[peak] Json"
                warmup: 20
            - GraphSearch:
                extra_args: "250 0 30"
                codespeed_name: "[peak] GraphSearch"
                warmup: 100
            - PageRank:
                extra_args: "120 0 1400"
                codespeed_name: "[peak] PageRank"
                warmup: 20

    som-startup:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "1 0 9"
                codespeed_name: "[1st] Fannkuch"
            - List:
                extra_args: "1 0 50"
                codespeed_name: "[1st] List"
            - Bounce:
                extra_args: "1 0 100"
                codespeed_name: "[1st] Bounce"
            - Permute:
                extra_args: "1 0 50"
                codespeed_name: "[1st] Permute"
            - Queens:
                extra_args: "1 0 50"
                codespeed_name: "[1st] Queens"
            - Storage:
                extra_args: "1 0 20"
                codespeed_name: "[1st] Storage"
            - Sieve:
                extra_args: "1 0 100"
                codespeed_name: "[1st] Sieve"
            - Towers:
                extra_args: "1 0 20"
                codespeed_name: "[1st] Towers"

    som-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_runtime: 600
        benchmarks:
            - Fannkuch:
                extra_args: "55 0 9"
                codespeed_name: "[peak] Fannkuch"
                warmup: 5
            - List:
                extra_args: "70 0 1000"
                codespeed_name: "[peak] List"
                warmup: 20
            - Bounce:
                extra_args: "60 0 4000"
                codespeed_name: "[peak] Bounce"
                warmup: 10
            - Permute:
                extra_args: "60 0 1500"
                codespeed_name: "[peak] Permute"
                warmup: 10
            - Queens:
                extra_args: "120 0 1000"
                codespeed_name: "[peak] Queens"
                warmup: 70
            - Storage:
                extra_args: "75 0 1000"
                codespeed_name: "[peak] Storage"
                warmup: 25
            - Sieve:
                extra_args: "60 0 2500"
                codespeed_name: "[peak] Sieve"
                warmup: 10
            - Towers:
                extra_args: "60 0 1000"
                codespeed_name: "[peak] Towers"
                warmup: 10

    sort-startup:
        gauge_adapter: RebenchLog
        command: &SORT_CMD " core-lib/Benchmarks/Harness.som Sort.%(benchmark)s "
        max_runtime: 600
        benchmarks:
            - TreeSort:
                extra_args: "1 0 10"
                codespeed_name: "[1st] TreeSort"
            - BubbleSort:
                extra_args: "1 0 100"
                codespeed_name: "[1st] BubbleSort"
            - QuickSort:
                extra_args: "1 0 20"
                codespeed_name: "[1st] QuickSort"

    sort-steady:
        gauge_adapter: RebenchLog
        command: *SORT_CMD
        max_runtime: 600
        benchmarks:
            - BubbleSort:
                extra_args: "60 0 3000"
                codespeed_name: "[peak] BubbleSort"
                warmup: 10
            - QuickSort:
                extra_args: "60 0 2000"
                codespeed_name: "[peak] QuickSort"
                warmup: 10
            - TreeSort:
                extra_args: "60 0 1000"
                codespeed_name: "[peak] TreeSort"
                warmup: 10

    micro-startup:
        gauge_adapter: RebenchLog
        command: &MICRO_CMD " core-lib/Benchmarks/Harness.som LanguageFeatures.%(benchmark)s "
        max_runtime: 30
        benchmarks:
            - Fibonacci:
                extra_args: "1 0 100"
                codespeed_name: "[1st] Fibonacci"
            - Dispatch:
                extra_args: "1 0 1000"
                codespeed_name: "[1st] Dispatch"
            - Loop:
                extra_args: "1 0 500"
                codespeed_name: "[1st] Loop"
            - Recurse:
                extra_args: "1 0 100"
                codespeed_name: "[1st] Recurse"
            - Sum:
                extra_args: "1 0 500"
                codespeed_name: "[1st] Sum"
            - IntegerLoop:
                extra_args: "1 0 400"
                codespeed_name: "[1st] IntegerLoop"
            - FieldLoop:
                extra_args: "1 0 50"
                codespeed_name: "[1st] FieldLoop"
            - WhileLoop:
                extra_args: "1 0 1000"
                codespeed_name: "[1st] WhileLoop"

    micro-steady:
        gauge_adapter: RebenchLog
        command: *MICRO_CMD
        max_runtime: 600
        benchmarks:
            - Fibonacci:
                extra_args: "70 0 1000"
                codespeed_name: "[peak] Fibonacci"
                warmup: 20
            - Dispatch:
                extra_args: "55 0 10000"
                codespeed_name: "[peak] Dispatch"
                warmup: 5
            - Loop:
                extra_args: "55 0 10000"
                codespeed_name: "[peak] Loop"
                warmup: 5
            - Recurse:
                extra_args: "70 0 2000"
                codespeed_name: "[peak] Recurse"
                warmup: 20
            - Sum:
                extra_args: "55 0 10000"
                codespeed_name: "[peak] Sum"
                warmup: 5
            - IntegerLoop:
                extra_args: "55 0 8000"
                codespeed_name: "[peak] IntegerLoop"
                warmup: 5
            - FieldLoop:
                extra_args: "55 0 900"
                codespeed_name: "[peak] FieldLoop"
                warmup: 5
            - WhileLoop:
                extra_args: "55 0 9000"
                codespeed_name: "[peak] WhileLoop"
                warmup: 5

    savina-interp:
        gauge_adapter: RebenchLog
        command: "core-lib/Benchmarks/AsyncHarness.som Savina.%(benchmark)s 50 0 "
        max_runtime: 180
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "[M] PingPong"
            - Counting:
                extra_args: 300000  # was 1000000
                codespeed_name: "[M] Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "[M] ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 40000
                codespeed_name: "[M] ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:100000"
                codespeed_name: "[M] ThreadRing"
            - Chameneos:
                extra_args: "100:20000"  # "100:200000"
                codespeed_name: "[M] Chameneos"
            - BigContention:
                extra_args: "2000:120"
                codespeed_name: "[M] BigContention"
            
            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:100:20" # "20:10000:50"
                codespeed_name: "[C] ConcurrentDictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:500:10:1" # "20:8000:10:1"
                codespeed_name: "[C] ConcurrentSortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:10:10:60" # "50:40:40:1000"
                codespeed_name: "[C] ProducerConsumerBoundedBuffer"
            - Philosophers:
                extra_args: "20:2000"
                codespeed_name: "[C] Philosophers"
            - SleepingBarber:
                extra_args: "1000:500:500:500"
                codespeed_name: "[C] SleepingBarber"
            - CigaretteSmokers:
                extra_args: "2000:200"
                codespeed_name: "[C] CigaretteSmokers"
            - LogisticsMapSeries:
                extra_args: "25000:10:346"
                codespeed_name: "[C] LogisticsMapSeries"
            - BankTransaction:
                extra_args: "1000:10000"
                codespeed_name: "[C] BankTransaction"

            # Parallelism
            - RadixSort:
                extra_args: "10000:65536:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "[P] RadixSort"
            - UnbalancedCobwebbedTree:
                extra_args: "10000:10:0:1"
                codespeed_name: "[P] UnbalancedCobwebbedTree"
            - TrapezoidalApproximation:
                extra_args: "100:2500:1:5" # "100:10000000:1:5"
                codespeed_name: "[P] TrapezoidalApproximation"
            - AStarSearch:
                extra_args: "100:10"
                codespeed_name: "[P] AStarSearch"
            - NQueens:
                extra_args: "20:9:4"
                codespeed_name: "[P] NQueens"
    
    savina-jit:
        gauge_adapter: RebenchLog
        command: "core-lib/Benchmarks/AsyncHarness.som Savina.%(benchmark)s 100 25 "
        max_runtime: 420
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "[M] PingPong"
            - Counting:
                extra_args: 200000  # was 1000000
                codespeed_name: "[M] Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "[M] ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 40000
                codespeed_name: "[M] ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:100000"
                codespeed_name: "[M] ThreadRing"
            - Chameneos:
                extra_args: "100:100000"  # "100:200000"
                codespeed_name: "[M] Chameneos"
            - BigContention:
                extra_args: "2000:120"
                codespeed_name: "[M] BigContention"
            
            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:1000:20" # "20:10000:50"
                codespeed_name: "[C] ConcurrentDictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:1500:10:1" # "20:8000:10:1"
                codespeed_name: "[C] ConcurrentSortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:10:10:600" # "50:40:40:1000"
                codespeed_name: "[C] ProducerConsumerBoundedBuffer"
            - Philosophers:
                extra_args: "20:5000"
                codespeed_name: "[C] Philosophers"
            - SleepingBarber:
                extra_args: "2500:1000:1000:1000"
                codespeed_name: "[C] SleepingBarber"
            - CigaretteSmokers:
                extra_args: "10000:200"
                codespeed_name: "[C] CigaretteSmokers"
            - LogisticsMapSeries:
                extra_args: "25000:10:346"
                codespeed_name: "[C] LogisticsMapSeries"
            - BankTransaction:
                extra_args: "1000:500000"
                codespeed_name: "[C] BankTransaction"

            # Parallelism
            - RadixSort:
                extra_args: "50000:65536:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "[P] RadixSort"
            - UnbalancedCobwebbedTree:
                extra_args: "100000:10:500:100"
                codespeed_name: "[P] UnbalancedCobwebbedTree"
            - TrapezoidalApproximation:
                extra_args: "100:1000000:1:5" # "100:10000000:1:5"
                codespeed_name: "[P] TrapezoidalApproximation"
            - AStarSearch:
                extra_args: "100:20"
                codespeed_name: "[P] AStarSearch"
            - NQueens:
                extra_args: "20:11:4"
                codespeed_name: "[P] NQueens"

# VMs have a name and are specified by a path and the binary to be executed
virtual_machines:
    SOMns-interp:
        path: .
        binary: som
        args: "-G "
    SOMns-graal:
        path: .
        binary: som
        
# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOMns:
        description: All benchmarks on SOMns with Graal
        actions: benchmark
        benchmark:
            - micro-startup
            - micro-steady
            - macro-startup
            - macro-steady
            - sort-startup
            - sort-steady
            - som-startup
            - som-steady
        executions:
            #- SOMns-interp  # let's not run those, it takes too long
            - SOMns-graal
    SOMns-Savina:
        description: Run the Savina Actor benchmarks
        actions: benchmarks
        executions:
            - SOMns-interp:
                benchmark: savina-interp
            - SOMns-graal:
                benchmark: savina-jit
