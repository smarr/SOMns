(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class LanguageFeaturesSuite usingPlatform: platform andHarness: harness = (
| private Benchmark       = harness Benchmark.
  private Array           = platform kernel Array.
  private Value           = platform kernel Value.
  private Vector          = platform kernel Vector.
  private Exception       = platform kernel Exception.
  private ObjectMirror    = platform mirrors ObjectMirror.
  private one = 5555.
|
)(
  public class Fibonacci = Benchmark ()(

    public benchmark = ( | result |
      result := self fibonacci: 20.
      ^ result
    )
  
    fibonacci: n = (
        ^ n <= 1
            ifTrue:  1 
            ifFalse: [ (self fibonacci: n - 1) + (self fibonacci: n - 2) ]
    )
  
    public verifyResult: result = (
      ^ 10946 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class OuterConstLoop = Benchmark ()(
    public benchmark = (
      | result |
      result := 0.
      1 to: 100000 do: [:i | 
        result := result + one.
      ].
      ^ result
    )
    
    public verifyResult: result = (
      ^ 555500000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )

  public class FieldLoop = Benchmark (
    | counter ::= 0. |
  )(
    public benchmark = ( | iter |
      counter := 0.
      iter := 20000.

      [ iter > 0 ] whileTrue: [
        iter := iter - 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
      
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
      
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
      
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
      
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
      
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
        counter := counter + 1.
      ].
      ^ counter
    )
  
    public verifyResult: result = (
      ^ 600000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class FieldWrite = Benchmark (
    | counter |
  )(
    public benchmark = (
      | bar |
      bar := 1234.
  
      1 to: 20000 do: [:i |
        counter := 2122.
      ].
      ^ counter
    )

    verifyResult: result = (
      ^ 2122 = result and: [counter = result]
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class IntegerLoop = Benchmark ()(
    public benchmark = ( | bounds a |
      bounds := 20000.
      bounds negated to: bounds by: 1 do: [:value | a := value-value].
      ^ a
    )
  
    public verifyResult: result = (
      ^ 0 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class Loop = Benchmark ()(
    singleRun = (
      | sum |
      sum := 0.
      1 to: 100 do: [ :j | sum := sum + 1 ].
      sum = 100 ifFalse: [
        self error: 'Wrong result: ' + sum + ' should be: 100' ].
      ^ sum
    )

    public benchmark = ( 
      | sum |
      sum := 0.
      1 to: 200 do: [ :i | sum := sum + self singleRun ].
      ^ sum
    )
  
    public verifyResult: result = (
      ^ 20000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class NonLocalReturn = Benchmark ()(

    first:  a = ( ^ self second: a )
    second: a = ( ^ self third: a  )
    third:  a = ( a value )
  
    nlr = ( self first: [ ^ 1 ] )

    public benchmark = (
      | sum |
      sum := 0.
      1 to: 200 do: [ :i | sum := sum + self nlr ].
      ^ sum
    )
  
    public verifyResult: result = (
      ^ 200 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class Exceptions = Benchmark ()(
    class ReturnEx signal: a = Exception (
      | public a = a. |
      self signal
    )()
    
    first:  a = ( ^ self second: a )
    second: a = ( ^ self third: a  )
    third:  a = ( ReturnEx signal: a )
    throw = ( self first: 1 )
    
    public benchmark = (
      | sum |
      sum := 0.
      1 to: 200 do: [:i |
        [self throw]
          on: ReturnEx
          do: [:e | sum := sum + e a ]
      ].
      ^ sum
    )
  
    public verifyResult: result = (
      ^ 200 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class Recurse = Benchmark ()(
    public benchmark = (
      ^ self recurse: 13
    )
  
    recurse: n = (
      n > 0 ifTrue: [ self recurse: n - 1. self recurse: n - 1 ].
      ^ n
    )
  
    public verifyResult: result = (
      ^ 13 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class Sum = Benchmark ()(
    public benchmark = (
      | result |
      1 to: 2 do: [:i | result := self sumFrom: 1 to: 10000 ].
      ^ result
    )
  
    sumFrom: start to: end = (
      | sum |
      sum := 0.
      start to: end do: [:i | sum := sum + i ].
      ^ sum
    )
  
    public verifyResult: result = (
      ^ 50005000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class WhileLoop = Benchmark ()(
    singleRun = (
      | sum |
      sum := 0.
      [sum < 1000]
        whileTrue:
          [sum := sum + 1].
      ^ sum
    )

    public benchmark = ( 
      | sum |
      sum := 0.
      [sum < 20000]
        whileTrue:
          [sum := sum + self singleRun].
      ^ sum
    )
  
    public verifyResult: result = (
      ^ 20000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )

  public class WhileLoopPoly = Benchmark ()(

    singleRun = (
      | sum poly b |
      sum := 0.
      [sum < 1000] whileTrue: [
        sum := sum + 1.
        (sum % 4) = 0 ifTrue: [ poly := 1 ].
        (sum % 4) = 1 ifTrue: [ poly := 'abc' ].
        (sum % 4) = 2 ifTrue: [ poly := 2222222222222222 ].
        (sum % 4) = 3 ifTrue: [ poly := 1//2 ].
        b := poly
      ].
      b := b + b.
      ^ sum
    )

    public benchmark = ( 
        | sum |
        sum := 0.
        [sum < 20000]
            whileTrue:
                [sum := sum + self singleRun].
        ^ sum
    )

    public verifyResult: result = (
      ^ 20000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class VectorRead = Benchmark ()(
    singleRun = (
        | sum v |
        v := Vector new.
        v at: 1 put: 1.
        sum := 0.
        [sum < 1000]
            whileTrue:
                [sum := sum + (v at: 1)].
        ^ sum
    )

    public benchmark = ( 
      | sum |
      sum := 0.
      [sum < 20000]
        whileTrue:
          [sum := sum + self singleRun].
      ^ sum
    )
    
    public verifyResult: result = (
      ^ 20000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )

  public class Dispatch = Benchmark ()(
    public benchmark = (
      | cnt |
      cnt := 0.
      1 to: 20000 do: [:i | cnt := cnt + (self method: i) ].
      ^ cnt
    )
    
    method: argument = ( ^argument )
    
    public verifyResult: result = (
      ^ 200010000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class DispatchNoArg = Benchmark ()(
    public benchmark = (
      | cnt |
      cnt := 0.
      1 to: 20000 do: [:i | cnt := cnt + self method ].
      ^ cnt
    )
  
    method = ( ^ 1 )
    
    public verifyResult: result = (
      ^ 20000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  (* TODO: fix perform primitive 
  public class DispatchPerform = Benchmark ()(
    public benchmark = (
      | cnt mirror |
      cnt := 0.
      mirror := ObjectMirror reflecting: self.
      1 to: 20000 do: [ :i | mirror perform: #method: withArguments: (Array with: i)].
      ^ cnt
    )
  
    public method: argument = ( ^ argument )
    
    public verifyResult: result = (
      ^ 200010000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  ) *)
  
  public class DispatchPerformNoArg = Benchmark ()(
    public benchmark = (
      | cnt mirror |
      cnt := 0.
      mirror := ObjectMirror reflecting: self.
      1 to: 20000 do: [ :i | cnt := cnt + (mirror perform: #method)].
      ^ cnt
    )
  
    public method = ( ^ 1 )
    
    public verifyResult: result = (
      ^ 20000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )

  public class InstantiatePrimValueObject = Benchmark <: Value ()(
    class AValue = Value (
    | public a = 1. b = 2. c = 3. d = 5. |
    )()
    
    public benchmark = (
      | val |
      1 to: 20000 do: [:i | val := AValue new ].
      ^ val
    )
    
    public verifyResult: result = (
      ^ 1 = result a
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )

  class ValueValue new: val = Value (
  | public a1 = val. a2 = val. a3 = val. a4 = val. a5 = val. a6 = val.
    a7 = val. a8 = val. a9 = val. a10 = val. |
  )()
  
  public class InstantiateValueValueObject = Benchmark (
  | aValue ::= ValueValue new: 2. |
  )(
    public benchmark = (
      | val |
      1 to: 20000 do: [:i | val := ValueValue new: aValue ].
      ^ val
    )
    
    public verifyResult: result = (
      ^ 2 = (result a1 a1)
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  class ValueValueFewer new: val = Value (
  | public a1 = val. a2 = val. a3 = val. |
  )()
  
  public class InstantiateValueValueObjectFewer = Benchmark (
  | aValue ::= ValueValueFewer new: 2. |
  )(
    public benchmark = (
      | val |
      1 to: 20000 do: [:i | val := ValueValueFewer new: aValue ].
      ^ val
    )
    
    public verifyResult: result = (
      ^ 2 = (result a1 a1)
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  class ObjWithOneMutableField = (
  | public foo ::= 0. |
  )()
  
  public class FieldWriteToEscapedObject = Benchmark (
  | private obj = ObjWithOneMutableField new. |
  )(
    public benchmark = (
      1 to: 20000000 do: [:i | obj foo: i ].
      ^ obj foo
    )
    
    public verifyResult: result = (
      ^ 20000000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
  
  public class PolyMorphicBlocks = Benchmark ()(
    public benchmark = (
      | blocks cnt |
      blocks := Array new: 10.

      cnt := 0.
      blocks at: 1 put: [ cnt := cnt +     1 ].
      blocks at: 2 put: [ cnt := cnt + 10000 ].
      blocks at: 3 put: [ cnt := cnt + 100000000 ].
      blocks at: 4 put: [ cnt := cnt ].
      blocks at: 5 put: [ cnt := cnt ].
      blocks at: 6 put: [ cnt := cnt ].
      blocks at: 7 put: [ cnt := cnt ].
      blocks at: 8 put: [ cnt := cnt ].
      blocks at: 9 put: [ cnt := cnt +     1 ].
      blocks at: 10 put: [ cnt := cnt +     1 ].
      
      1 to: 8000 do: [:i |
        blocks do: [:b | b value ] ].
      ^ cnt
    )
  
    public verifyResult: result = (
    result println.
      (* ^ 800080008000 = result *)
      ^ 800080024000 = result
    )
  ) : (
    public newInstance = ( ^ self new )
    public setupVerifiedRun: run = ( run innerIterations: 1 )
  )
)
