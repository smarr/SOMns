(* This version is a transcription of the Ruby implementation mandelbrot.rb
  found with JRuby
  https://raw.githubusercontent.com/jruby/jruby/3e43676ee6dc3c13e70fe4a52cce685128c23b8e/bench/truffle/mandelbrot.rb

  The original copyright statement reads as follows:

# Copyright Â© 2004-2013 Brent Fulgham
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
# 
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
# 
#   * Neither the name of 'The Computer Language Benchmarks Game' nor the name
#     of 'The Computer Language Shootout Benchmarks' nor the names of its
#     contributors may be used to endorse or promote products derived from this
#     software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The Computer Language Benchmarks Game
# http://benchmarksgame.alioth.debian.org
# 
#  contributed by Karl von Laudermann
#  modified by Jeremy Echols
#  modified by Detlef Reichl
#  modified by Joseph LaFata
#  modified by Peter Zotov
# 
# http://benchmarksgame.alioth.debian.org/u64q/program.php?test=mandelbrot&lang=yarv&id=3
*)
class MandelbrotSuite usingPlatform: platform andHarness: harness = (
| private Benchmark = harness Benchmark. |
)(
  class Mandelbrot = Benchmark (
    | firstResult |
  ) (
    public innerBenchmarkLoop: innerIterations = ( 
      ^ self verify: (self mandelbrot: innerIterations) inner: innerIterations
    )

    verify: result inner: innerIterations = (
      innerIterations = 750 ifTrue: [
        ^ result = 50
      ].
      firstResult isNil ifTrue: [
        firstResult := result.
      ].
      ^ result = firstResult
    )

    mandelbrot: size = (
      | sum byteAcc bitNum y |
      sum     := 0.
      byteAcc := 0.
      bitNum  := 0.

      y := 0.
      
      [y < size] whileTrue: [
          | ci x |
          ci := (2.0 * y // size) - 1.0.
          x  := 0.
          
          [x < size] whileTrue: [
              | zr zrzr zi zizi cr escape z notDone |
              zrzr := zr := 0.0.
              zizi := zi := 0.0.
              cr   := (2.0 * x // size) - 1.5.
              
              z := 0.
              notDone := true.
              escape := 0.
              [notDone and: [z < 50]] whileTrue: [
                  zr := zrzr - zizi + cr.
                  zi := 2.0 * zr * zi + ci.
          
                  (* preserve recalculation *)
                  zrzr := zr * zr.
                  zizi := zi * zi.
          
                  (zrzr + zizi > 4.0) ifTrue: [
                      notDone := false.
                      escape  := 1.
                  ].
                  z := z + 1.
              ].

              byteAcc := (byteAcc << 1) + escape.
              bitNum  := bitNum + 1.

              (* Code is very similar for these cases, but using separate blocks
                 ensures we skip the shifting when it is unnecessary,
                 which is in most cases. *)
              bitNum = 8 
                  ifTrue: [
                    sum := sum bitXor: byteAcc.
                    byteAcc := 0.
                    bitNum  := 0. ]
                  ifFalse: [
                    (x = (size - 1)) ifTrue: [
                        byteAcc := byteAcc << (8 - bitNum).
                        sum := sum bitXor: byteAcc.
                        byteAcc := 0.
                        bitNum  := 0. ]].
              x := x + 1.
          ].
          y := y + 1.
      ].
      
      ^ sum
    )
  )
  
  public newInstance = ( ^ Mandelbrot new )
  public setupVerifiedRun: run = ( run innerIterations: 750 )
)
