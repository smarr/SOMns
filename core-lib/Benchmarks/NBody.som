(*
  The Computer Language Benchmarks Game
  http://shootout.alioth.debian.org/

  contributed by Mark C. Lewis
  modified slightly by Chad Whipkey
  
  Based on nbody.java ported to SOM by Stefan Marr.
*)
class NBodySuite usingPlatform: platform andHarness: harness = (
| private Benchmark       = harness Benchmark.
  private Array           = platform kernel Array.
|
)(
  class NBody = Benchmark (
    | expectedEnergy |
  )(
    
    public innerBenchmarkLoop: innerIterations = (
        | bodies |
        bodies := NBodySystem new.
        
        1 to: innerIterations do: [:i |
            bodies advance: 0.01.
        ].
        
        innerIterations = 250000 ifTrue: [
          ^ bodies energy = -0.1690859889909308
        ].
        expectedEnergy isNil ifTrue: [
          expectedEnergy := bodies energy.
          ^ true
        ].
        
        ^ expectedEnergy = bodies energy.
    )
  )
  
  class NBodySystem = (
  | bodies = self createBodies. |
  )(
    public createBodies = (
      | px py pz bodies |

      bodies := Array new: 5.
      bodies at: 1 put: Body sun.
      bodies at: 2 put: Body jupiter.
      bodies at: 3 put: Body saturn.
      bodies at: 4 put: Body uranus.
      bodies at: 5 put: Body neptune.
  
      (* bodies do: [:b | b print. '' println ]. *)

      px := 0.0.  py := 0.0.  pz := 0.0.

      bodies do: [:b |
        px := px + (b vx * b mass).
        py := py + (b vy * b mass).
        pz := pz + (b vz * b mass).
      ].
  
      (bodies at: 1) offsetMomentumX: px y: py z: pz.
  
      (* bodies do: [:b | b print. '' println ]. *)
      ^ bodies
    )

    public advance: dt = (
      1 to: bodies size do: [:i |
        | iBody |
        iBody := bodies at: i.

        i + 1 to: bodies size do: [:j |
          | dx dy dz jBody dSquared distance mag |
          jBody := bodies at: j.
          dx := iBody x - jBody x.
          dy := iBody y - jBody y.
          dz := iBody z - jBody z.

          dSquared := (dx * dx) + (dy * dy) + (dz * dz).
          distance := dSquared sqrt.
          mag      := dt // (dSquared * distance).

          iBody vx: iBody vx - (dx * jBody mass * mag).
          iBody vy: iBody vy - (dy * jBody mass * mag).
          iBody vz: iBody vz - (dz * jBody mass * mag).

          jBody vx: jBody vx + (dx * iBody mass * mag).
          jBody vy: jBody vy + (dy * iBody mass * mag).
          jBody vz: jBody vz + (dz * iBody mass * mag).
        ].
      ].
     
      bodies do: [:body |
        body x: body x + (dt * body vx).
        body y: body y + (dt * body vy).
        body z: body z + (dt * body vz).
      ].
    )
    
    public energy = (
      | dx dy dz distance e |
      e := 0.0.

      1 to: bodies size do: [:i |
        | iBody |
        iBody := bodies at: i.
    
        e := e + (0.5 * iBody mass *
             ((iBody vx * iBody vx) +
              (iBody vy * iBody vy) +
              (iBody vz * iBody vz))).
    
        i + 1 to: bodies size do: [:j |
          | jBody |
          jBody := bodies at: j.
    
          dx := iBody x - jBody x.
          dy := iBody y - jBody y.
          dz := iBody z - jBody z.

          distance := ((dx*dx) + (dy*dy) + (dz*dz)) sqrt.
          e := e - ((iBody mass * jBody mass) // distance).
        ].
      ].
      ^ e
    )
  )
  
  class Body = (
  | public x  ::= 0.0.
    public y  ::= 0.0.
    public z  ::= 0.0.
    public vx ::= 0.0.
    public vy ::= 0.0.
    public vz ::= 0.0.
    public mass ::= 0.0.
  |
  ) (    
    public offsetMomentumX: px y: py z: pz = (
      vx := 0.0 - (px // Body SolarMass).
      vy := 0.0 - (py // Body SolarMass).
      vz := 0.0 - (pz // Body SolarMass).
    )
    
    public print = (
      'x:  ' print. x println.
      'y:  ' print. y println.
      'z:  ' print. z println.
      
      'vx: ' print. vx println.
      'vy: ' print. vy println.
      'vz: ' print. vz println.
      
      'mass: ' print. mass println.
    )
  ) : (
    public Pi          = ( ^ 3.141592653589793 )
    public SolarMass   = ( ^ 4 * self Pi * self Pi )
    public DaysPerYear = ( ^ 365.24 )
    
    public jupiter = ( | b |
      b := self new.
      b x:    4.8414314424647209.
      b y:   -1.16032004402742839.
      b z:   -0.103622044471123109.
      b vx:   0.00166007664274403694   * self DaysPerYear.
      b vy:   0.00769901118419740425   * self DaysPerYear.
      b vz:  -0.0000690460016972063023 * self DaysPerYear.
      b mass: 0.000954791938424326609  * self SolarMass.
      ^ b
    )

    public saturn = ( | b |
      b := self new.
      b x:    8.34336671824457987.
      b y:    4.12479856412430479.
      b z:   -0.403523417114321381.
      b vx:  -0.00276742510726862411   * self DaysPerYear.
      b vy:   0.00499852801234917238   * self DaysPerYear.
      b vz:   0.0000230417297573763929 * self DaysPerYear.
      b mass: 0.000285885980666130812  * self SolarMass.
      ^ b
    )

    public uranus = ( | b |
      b := self new.
      b x:   12.894369562139131.
      b y:  -15.1111514016986312.
      b z:   -0.223307578892655734.
      b vx:   0.00296460137564761618   * self DaysPerYear.
      b vy:   0.0023784717395948095    * self DaysPerYear.
      b vz:  -0.0000296589568540237556 * self DaysPerYear.
      b mass: 0.0000436624404335156298 * self SolarMass.
      ^ b
    )

    public neptune = ( | b |
      b := self new.
      b x:   15.3796971148509165.
      b y:  -25.9193146099879641.
      b z:    0.179258772950371181.
      b vx:   0.00268067772490389322   * self DaysPerYear.
      b vy:   0.00162824170038242295   * self DaysPerYear.
      b vz:  -0.000095159225451971587  * self DaysPerYear.
      b mass: 0.0000515138902046611451 * self SolarMass.
      ^ b
    )

    public sun = ( | b |
      b := self new.
      b mass: self SolarMass.
      ^ b
    )
  )
  public newInstance = ( ^ NBody new )
  public setupVerifiedRun: run = ( run innerIterations: 250000 )
)
