class DeltaBlue usingPlatform: platform andHarness: harness = (
  | private Benchmark         = harness Benchmark.
    private Array             = platform kernel Array.
    private Vector            = platform kernel Vector.
    private Dictionary        = platform collections Dictionary.
    private strengthTable     = Strength createStrengthTable.
    private strengthConstants = Strength createStrengthConstants.
    
    private AbsoluteStrongest = Strength of: #absoluteStrongest.
    private AbsoluteWeakest   = Strength of: #absoluteWeakest.
    private Required          = Strength of: #required.
  |
)(
  class DeltaBlue = Benchmark ()(
    public innerBenchmarkLoop: innerIterations = (
      Planner chainTest: innerIterations.
      Planner projectionTest: innerIterations.
      ^ true
    )
  )
  
  class Plan = Vector new: 15 (
    (* A Plan is an ordered list of constraints to be executed in sequence to
    resatisfy all currently satisfiable constraints in the face of one or more
    changing inputs. *)
  )(
    'execution'
    public execute = (
      (* Execute my constraints in order. *)
      self do: [:c | c execute]
    )
  )

  class Planner = (
    (* This benchmark is an implementation of the DeltaBlue Constraint Solver
       described in `The DeltaBlue Algorithm: An Incremental Constraint
       Hierarchy Solver'', by Bjorn N. Freeman-Benson and John Maloney,
       Communications of the ACM, January 1990 (also as University of
       Washington TR 89-08-06).

     To run the benchmark, execute the expression `Planner standardBenchmark`. *)
    | currentMark ::= 1. |
  )(
    'add/remove'
    public incrementalAdd: c = (
      (* Attempt to satisfy the given constraint and, if successful,
         incrementally update the dataflow graph.

         Details: If satifying the constraint is successful, it may override a
         weaker constraint on its output. The algorithm attempts to resatisfy
         that constraint using some other method. This process is repeated
         until either a) it reaches a variable that was not previously
         determined by any constraint or b) it reaches a constraint that
         is too weak to be satisfied using any of its methods. The variables
         of constraints that have been processed are marked with a unique mark
         value so that we know where we've been. This allows the algorithm to
         avoid getting into an infinite loop even if the constraint graph has
         an inadvertent cycle. *)
      | mark overridden |
      mark := self newMark.
      overridden := c satisfy: mark propagate: self.
      [overridden == nil] whileFalse:
          [overridden := overridden satisfy: mark propagate: self]
    )

    public incrementalRemove: c = (
      (* Entry point for retracting a constraint. Remove the given constraint,
         which should be satisfied, and incrementally update the dataflow
         graph.

         Details: Retracting the given constraint may allow some currently
         unsatisfiable downstream constraint be satisfied. We thus collect a
         list of unsatisfied downstream constraints and attempt to satisfy
         each one in turn. This list is sorted by constraint strength,
         strongest first, as a heuristic for avoiding unnecessarily adding
         and then overriding weak constraints. *)
      | out unsatisfied |
      out := c output.
      c markUnsatisfied.
      c removeFromGraph.
      unsatisfied := self removePropagateFrom: out.
      unsatisfied do: [: u | self incrementalAdd: u]
    )

    'planning/value propagation'
    public extractPlanFromConstraints: constraints = (
      (* Extract a plan for resatisfaction starting from the outputs of the
         given constraints, usually a set of input constraints. *)
      | sources |
      sources := Vector new.
      constraints do: [:c |
        (c isInput and: [c isSatisfied]) ifTrue: [sources append: c]].
      ^ self makePlan: sources
    )

    public extractPlanFromVariables: variables = (
      (* Extract a plan from the dataflow graph having the given variables. It
         is assumed that the given set of variables is complete, or at least
         that it contains all the input variables. *)
      | sources |
      sources := Vector new.
      variables do: [:v |
        v constraints do: [: c |
          (c isInput and: [c isSatisfied]) ifTrue: [sources add: c]]].
      ^self makePlan: sources
    )

    makePlan: sources = (
      (* Extract a plan for resatisfaction starting from the given satisfied
         source constraints, usually a set of input constraints. This method
         assumes that stay optimization is desired; the plan will contain only
         constraints whose output variables are not stay. Constraints that do
         no computation, such as stay and edit constraints, are not included
         in the plan.

         Details: The outputs of a constraint are marked when it is added to
         the plan under construction. A constraint may be appended to the plan
         when all its input variables are known. A variable is known if either
         a) the variable is marked (indicating that has been computed by a
         constraint appearing earlier in the plan), b) the variable is 'stay'
         (i.e. it is a constant at plan execution time), or c) the variable
         is not determined by any constraint. The last provision is for past
         states of history variables, which are not stay but which are also
         not computed by any constraint. *)
      | mark plan todo c |
      mark := self newMark.
      plan := Plan new.
      todo := sources.
      [todo isEmpty] whileFalse:
        [c := todo removeFirst.
          (c output mark <> mark and: [     (* not in plan already and... *)
            c inputsKnown: mark]) ifTrue: [ (* eligible for inclusion *)
              plan append: c.
              c output mark: mark.
              self addConstraintsConsuming: c output to: todo]].
      ^ plan
    )

    propagateFrom: v = (
      (* The given variable has changed. Propagate new values downstream. *)
      | todo c |
      todo := Vector new.
      self addConstraintsConsuming: v to: todo.
      [todo isEmpty] whileFalse: [
        c := todo removeFirst.
        c execute.
        self addConstraintsConsuming: c output to: todo].
    )

    'private'
    addConstraintsConsuming: v to: aCollection = (
      | determiningC |
      determiningC := v determinedBy.
      v constraints do: [:c |
        (c == determiningC or: [c isSatisfied not]) ifFalse:
          [aCollection append: c]].
    )

    public addPropagate: c mark: mark = (
      (* Recompute the walkabout strengths and stay flags of all variables
         downstream of the given constraint and recompute the actual values
         of all variables whose stay flag is true. If a cycle is detected,
         remove the given constraint and answer false. Otherwise, answer true.

         Details: Cycles are detected when a marked variable is encountered
         downstream of the given constraint. The sender is assumed to have
         marked the inputs of the given constraint with the given mark. Thus,
         encountering a marked node downstream of the output constraint means
         that there is a path from the constraint's output to one of its
         inputs. *)
      | todo d |
      todo := Vector with: c.
      [todo isEmpty] whileFalse: [
        d := todo removeFirst.
        d output mark = mark ifTrue: [
          self incrementalRemove: c.
          ^ false].
        d recalculate.
        self addConstraintsConsuming: d output to: todo].
      ^ true
    )

    public changeVar: aVariable newValue: newValue = (
      | editConstraint plan |
      editConstraint := EditConstraint var: aVariable strength: #preferred addTo: self.
      plan := self extractPlanFromConstraints: (Array with: editConstraint).
      10 timesRepeat: [
        aVariable value: newValue.
        plan execute].
      editConstraint destroyConstraint: self.
    )

    constraintsConsuming: v do: aBlock = (
      | determiningC |
      determiningC := v determinedBy.
      v constraints do:
        [:c |
          (c == determiningC or: [c isSatisfied not]) ifFalse:
            [aBlock value: c]].
    )

    newMark = (
      (* Select a previously unused mark value.

         Details: We just keep incrementing. If necessary, the counter will
         turn into a LargePositiveInteger. In that case, it will be a bit
         slower to compute the next mark but the algorithms will all behave
         correctly. We reserve the value '0' to mean 'unmarked'. Thus, this
         generator starts at '1' and will never produce '0' as a mark value. *)
      ^ currentMark := currentMark + 1
    )

    removePropagateFrom: out = (
      (* Update the walkabout strengths and stay flags of all variables
         downstream of the given constraint. Answer a collection of unsatisfied
         constraints sorted in order of decreasing strength. *)
      | unsatisfied todo v nextC u2 |
      unsatisfied := Vector new.

      out determinedBy: nil.
      out walkStrength: Strength absoluteWeakest.
      out stay: true.
      todo := Vector with: out.
      [todo isEmpty] whileFalse: [
        v := todo removeFirst.
        v constraints do: [:c |
          c isSatisfied ifFalse: [unsatisfied append: c]].
        self constraintsConsuming: v do: [:c |
          c recalculate.
          todo append: c output]].

      unsatisfied sort: [:c1 :c2 | c1 strength stronger: c2 strength].
      ^ unsatisfied
    )
  ) : (
    'benchmarks'
    public chainTest: n = (
      (* Do chain-of-equality-constraints performance tests. *)
      | vars editConstraint plan planner |
    
      planner := Planner new.
      vars := Array new: n+1 withAll: [ Variable new ].

      (* thread a chain of equality constraints through the variables *)
      1 to: n do: [ :i |
        | v1 v2 |
        v1 := vars at: i.
        v2 := vars at: i + 1.
        EqualityConstraint var: v1 var: v2 strength: #required addTo: planner
      ].

      StayConstraint var: vars last strength: #strongDefault addTo: planner.
      editConstraint := EditConstraint var: vars first strength: #preferred addTo: planner.
      plan := planner extractPlanFromConstraints: (Array with: editConstraint).

      1 to: 100 do: [:v | 
        vars first value: v.
        plan execute.
        vars last value <> v ifTrue: [self error: 'Chain test failed!!']
      ].

      editConstraint destroyConstraint: planner
    )

    public projectionTest: n = (
      (* This test constructs a two sets of variables related to each other by
         a simple linear transformation (scale and offset). *)
      | scale offset src dst planner dests |
      planner := Planner new.
      dests   := Vector new.
      scale   := Variable value: 10.
      offset  := Variable value: 1000.

      1 to: n do: [:i |
        src := Variable value: i.
        dst := Variable value: i.
        dests append: dst.
        StayConstraint var: src strength: #default addTo: planner.
        ScaleConstraint src: src scale: scale offset: offset dst: dst strength: #required addTo: planner
      ].

      planner changeVar: src newValue: 17.
      dst value <> 1170 ifTrue: [ self error: 'Projection test 1 failed!!' ].

      planner changeVar: dst newValue: 1050.
      src value <> 5 ifTrue: [ self error: 'Projection test 2 failed!!' ].

      planner changeVar: scale newValue: 5.
      1 to: n - 1 do: [:i |
        (dests at: i) value <> (i*5 + 1000)
          ifTrue: [ self error: 'Projection test 3 failed!!' ]].

      planner changeVar: offset newValue: 2000.
      1 to: n - 1 do: [:i |
        (dests at: i) value <> (i*5 + 2000)
          ifTrue: [ self error: 'Projection test 4 failed!!']]
    )
  )

  class Strength new: symVal = (
  (* Strengths are used to measure the relative importance of constraints. The
     hierarchy of available strengths is determined by the class variable
     StrengthTable (see my class initialization method). Because Strengths are
     invariant, references to Strength instances are shared (i.e. all references
     to `Strength of: #required` point to a single, shared instance). New
     strengths may be inserted in the strength hierarchy without disrupting
     current constraints.

     Instance variables:
         symbolicValue      symbolic strength name (e.g. #required) <Symbol>
         arithmeticValue    index of the constraint in the hierarchy, used for comparisons <Number> *)
    | private symbolicValue   = symVal.
      public  arithmeticValue = strengthTable at: symVal. |
  ) (
    'comparing'
    public sameAs: aStrength = (
      (* Answer true if I am the same strength as the given Strength. *)
      ^ arithmeticValue = aStrength arithmeticValue
    )

    public stronger: aStrength = (
      (* Answer true if I am stronger than the given Strength. *)
      ^ arithmeticValue < aStrength arithmeticValue
    )

    public weaker: aStrength = (
      (* Answer true if I am weaker than the given Strength. *)
      ^ arithmeticValue > aStrength arithmeticValue
    )

    'max/min'
    public strongest: aStrength = (
      (* Answer the stronger of myself and aStrength. *)
      (aStrength stronger: self)
        ifTrue:  [ ^ aStrength ]
        ifFalse: [ ^ self ].
    )

    public weakest: aStrength = (
      (* Answer the weaker of myself and aStrength. *)
      (aStrength weaker: self)
        ifTrue:  [ ^ aStrength ]
        ifFalse: [ ^ self ].
    )
  ) : (
    public createStrengthTable = (
      | table |
      (* Initialize the symbolic strength table. *)
      table := Dictionary new.
      table at: #absoluteStrongest put: -10000.
      table at: #required put: -800.
      table at: #strongPreferred put: -600.
      table at: #preferred put: -400.
      table at: #strongDefault put: -200.
      table at: #default put: 0.
      table at: #weakDefault put: 500.
      table at: #absoluteWeakest put: 10000.
      ^ table
    )
    
    public createStrengthConstants = (
      | constants |
      constants := Dictionary new.
      strengthTable keys do: [:strengthSymbol |
        constants
          at: strengthSymbol
          put: (self new: strengthSymbol)].
      ^ constants
    )

    'instance creation'
    public of: aSymbol = (
      (* Answer an instance with the specified strength. *)
      ^ strengthConstants at: aSymbol
    )

    'constants'
    public absoluteStrongest = (
      ^ AbsoluteStrongest
    )

    public absoluteWeakest = (
      ^ AbsoluteWeakest
    )

    public required = (
      ^ Required
    )
  )
  
  class AbstractConstraint new: strengthSymbol = (
    (* I am an abstract class representing a system-maintainable relationship
       (or 'constraint') between a set of variables. I supply a strength instance
       variable; concrete subclasses provide a means of storing the constrained
       variables and other information required to represent a constraint.

      Instance variables:
          strength            the strength of this constraint <Strength> *)
    | public strength = Strength of: strengthSymbol. |
  ) (
    'queries'
    public isInput = (
      (* Normal constraints are not input constraints. An input constraint is
         one that depends on external state, such as the mouse, the keyboard,
         a clock, or some arbitrary piece of imperative code. *)
      ^ false
    )

    public isSatisfied = (
      (* Answer true if this constraint is satisfied in the current solution. *)
      self subclassResponsibility
    )

    'add/remove'
    addConstraint: planner = (
      (* Activate this constraint and attempt to satisfy it. *)
      self addToGraph.
      planner incrementalAdd: self.
    )

    addToGraph = (
      (* Add myself to the constraint graph. *)
      self subclassResponsibility
    )

    public destroyConstraint: planner = (
      (* Deactivate this constraint, remove it from the constraint graph,
         possibly causing other constraints to be satisfied, and destroy it. *)
      self isSatisfied ifTrue: [planner incrementalRemove: self].
      self removeFromGraph.
    )

    public removeFromGraph = (
      (* Remove myself from the constraint graph. *)
      self subclassResponsibility
    )

    'planning'
    public chooseMethod: mark = (
      (* Decide if I can be satisfied and record that decision. The output of
         the choosen method must not have the given mark and must have a
         walkabout strength less than that of this constraint. *)
      self subclassResponsibility
    )

    public execute = (
      (* Enforce this constraint. Assume that it is satisfied. *)
      self subclassResponsibility
    )

    public inputsDo: aBlock = (
      (* Assume that I am satisfied. Evaluate the given block on all my current
         input variables. *)
      self subclassResponsibility
    )

    public inputsKnown: mark = (
      (* Assume that I am satisfied. Answer true if all my current inputs are
         known. A variable is known if either a) it is 'stay' (i.e. it is a
         constant at plan execution time), b) it has the given mark (indicating
         that it has been computed by a constraint appearing earlier in the
         plan), or c) it is not determined by any constraint. *)
      self inputsDo: [:v |
        (v mark = mark or: [v stay or: [v determinedBy == nil]])
          ifFalse: [ ^ false ]].
      ^ true
    )

    public markUnsatisfied = (
      (* Record the fact that I am unsatisfied. *)
      self subclassResponsibility
    )

    public output = (
      (* Answer my current output variable. Raise an error if I am not
         currently satisfied. *)
      self subclassResponsibility
    )

    public recalculate = (
      (* Calculate the walkabout strength, the stay flag, and, if it is 'stay',
         the value for the current output of this constraint. Assume this
         constraint is satisfied. *)
      self subclassResponsibility
    )

    public satisfy: mark propagate: planner = (
      (* Attempt to find a way to enforce this (still unsatisfied) constraint.
         If successful, record the solution, perhaps modifying the current
         dataflow graph.  Answer the constraint that this constraint overrides,
         if there is one, or nil, if there isn't. *)
      | overridden |
      self chooseMethod: mark.
      self isSatisfied
        ifTrue: [
          | out |
          (* constraint can be satisfied
             mark inputs to allow cycle detection in addPropagate *)
          self inputsDo: [: in | in mark: mark].
          out := self output.
          overridden := out determinedBy.
          overridden == nil ifFalse: [overridden markUnsatisfied].
          out determinedBy: self.
          (planner addPropagate: self mark: mark) ifFalse:
            [self error: 'Cycle encountered adding:\tConstraint removed.'.
            ^ nil].
          out mark: mark]
        ifFalse: [ (* constraint cannot be satisfied *)
          overridden := nil.
          (strength sameAs: (Strength required)) ifTrue:
            [self error: 'Failed to satisfy a required constraint']].
      ^ overridden
    )
  )
  
  class BinaryConstraint var: var1 var: var2 strength: strengthSymbol addTo: planner = AbstractConstraint new: strengthSymbol (
    (* I am an abstract superclass for constraints having two possible output
       variables.

      Instance variables:
          v1, v2      possible output variables <Variable>
          direction       one of:
                          #forward (v2 is output)
                          #backward ( v1 is output)
                          nil (not satisfied) *)
    | v1 = var1.
      v2 = var2.
      direction ::= nil. |
  ) (
    'queries'
    public isSatisfied = (
      (* Answer true if this constraint is satisfied in the current solution. *)
      ^ direction notNil
    )

    'add/remove'
    addToGraph = (
      (* Add myself to the constraint graph. *)
      v1 addConstraint: self.
      v2 addConstraint: self.
      direction := nil
    )

    public removeFromGraph = (
      (* Remove myself from the constraint graph. *)
      v1 == nil ifFalse: [ v1 removeConstraint: self ].
      v2 == nil ifFalse: [ v2 removeConstraint: self ].
      direction := nil.
    )

    'planning'
    chooseMethod: mark = (
      (* Decide if I can be satisfied and which way I should flow based on
       the relative strength of the variables I relate, and record that
       decision. *)

      v1 mark = mark ifTrue: [ (* forward or nothing *)
        ((v2 mark <> mark) and: [ strength stronger: v2 walkStrength ])
          ifTrue:  [ ^ direction := #forward ]
          ifFalse: [ ^ direction := nil ]].

      v2 mark = mark ifTrue: [ (* backward or nothing *)
        ((v1 mark <> mark) and: [ strength stronger: v1 walkStrength ])
            ifTrue:  [ ^ direction := #backward ]
            ifFalse: [ ^ direction := nil ]].

      (* if we get here, neither variable is marked, so we have choice *)
      (v1 walkStrength weaker: v2 walkStrength)
        ifTrue:
          [(strength stronger: v1 walkStrength)
            ifTrue:  [ ^ direction := #backward ]
            ifFalse: [ ^ direction := nil ]]
        ifFalse:
          [(strength stronger: v2 walkStrength)
            ifTrue:  [ ^ direction := #forward ]
            ifFalse: [ ^ direction := nil ]].
    )

    public execute = (
      (* Enforce this constraint. Assume that it is satisfied. *)
      self subclassResponsibility
    )

    inputsDo: aBlock = (
      (* Evaluate the given block on my current input variable. *)
      direction = #forward
        ifTrue:  [ aBlock value: v1 ]
        ifFalse: [ aBlock value: v2 ]
    )

    public markUnsatisfied = (
      (* Record the fact that I am unsatisfied. *)
      direction := nil
    )

    public output = (
      (* Answer my current output variable. *)
      direction = #forward
        ifTrue:  [ ^ v2 ]
        ifFalse: [ ^ v1 ]
    )

    public recalculate = (
      (* Calculate the walkabout strength, the stay flag, and, if it is 'stay',
         the value for the current output of this constraint. Assume this
         constraint is satisfied. *)
      | in out |
      direction = #forward
        ifTrue:  [ in := v1. out := v2 ]
        ifFalse: [ in := v2. out := v1 ].
      out walkStrength: (strength weakest: in walkStrength).
      out stay: in stay.
      out stay ifTrue: [self execute].      (* stay optimization *)
    )
  )

  class EditConstraint var: aVariable strength: strengthSymbol addTo: planner = UnaryConstraint var: aVariable strength: strengthSymbol addTo: planner (
    (* I am a unary input constraint used to mark a variable that the client
       wishes to change. *)
  )(
    'queries'
    public isInput = (
      (* I indicate that a variable is to be changed by imperative code. *)
      ^ true
    )

    'execution'
    public execute = (
      (* Edit constraints do nothing. *)
    )
  )

  class EqualityConstraint var: var1 var: var2 strength: strengthSymbol addTo: planner = BinaryConstraint var: var1 var: var2 strength: strengthSymbol addTo: planner (
    (* I constrain two variables to have the same value: `v1 = v2`. *)
    self addConstraint: planner.
  )(
    'execution'
    public execute = (
      (* Enforce this constraint. Assume that it is satisfied. *)
      direction = #forward
        ifTrue:  [ v2 value: v1 value ]
        ifFalse: [ v1 value: v2 value ]
    )
  )

  class ScaleConstraint src: srcVar scale: scaleVar offset: offsetVar dst: dstVar strength: strengthSymbol addTo: planner = BinaryConstraint var: srcVar var: dstVar strength: strengthSymbol addTo: planner (
    (* I relate two variables by the linear scaling relationship:
       `v2 = (v1 * scale) + offset`. Either v1 or v2 may be changed to maintain
       this relationship but the scale factor and offset are considered read-only.

    Instance variables:
        scale       scale factor input variable <Variable>
        offset      offset input variable <Variable> *)
    | scale  = scaleVar.
      offset = offsetVar. |
    self addConstraint: planner.
  )(
    'add/remove'
    addToGraph = (
      (* Add myself to the constraint graph. *)
      v1 addConstraint: self.
      v2 addConstraint: self.
      scale  addConstraint: self.
      offset addConstraint: self.
      direction := nil.
    )

    public removeFromGraph = (
      (* Remove myself from the constraint graph. *)
      v1 == nil ifFalse: [ v1 removeConstraint: self ].
      v2 == nil ifFalse: [ v2 removeConstraint: self ].
      scale  == nil ifFalse: [ scale removeConstraint: self ].
      offset == nil ifFalse: [ offset removeConstraint: self ].
      direction := nil.
    )

    'planning'
    public execute = (
      (* Enforce this constraint. Assume that it is satisfied. *)
      direction = #forward
        ifTrue:  [ v2 value: (v1 value * scale value) + offset value ]
        ifFalse: [ v1 value: (v2 value - offset value) / scale value ]
    )

    inputsDo: aBlock = (
      (* Evaluate the given block on my current input variable. *)
      direction = #forward
        ifTrue: [aBlock value: v1.
                 aBlock value: scale.
                 aBlock value: offset]
        ifFalse: [aBlock value: v2.
                  aBlock value: scale.
                  aBlock value: offset].
    )

    public recalculate = (
      (* Calculate the walkabout strength, the stay flag, and, if it is 'stay',
         the value for the current output of this constraint. Assume this
         constraint is satisfied. *)
      | in out |
      direction = #forward
        ifTrue:  [ in  := v1. out := v2 ]
        ifFalse: [ out := v1. in  := v2 ].
      out walkStrength: (strength weakest: in walkStrength).
      out stay: (in stay and: [scale stay and: [offset stay]]).
      out stay ifTrue: [self execute].      (* stay optimization *)
    )
  )
  
  class UnaryConstraint var: aVariable strength: strengthSymbol addTo: planner = AbstractConstraint new: strengthSymbol (
    (* I am an abstract superclass for constraints having a single possible
       output variable.

    Instance variables:
        output      possible output variable <Variable>
        satisfied       true if I am currently satisfied <Boolean> *)
    | public output = aVariable.
      satisfied     ::= false. |
    self addConstraint: planner.
  )(
    'queries'
    public isSatisfied = (
      (* Answer true if this constraint is satisfied in the current solution. *)
      ^ satisfied
    )

    'add/remove'
    addToGraph = (
      (* Add myself to the constraint graph. *)
      output addConstraint: self.
      satisfied := false.
    )

    public removeFromGraph = (
      (* Remove myself from the constraint graph. *)
      output == nil ifFalse: [output removeConstraint: self].
      satisfied := false.
    )

    'planning'
    chooseMethod: mark = (
      (* Decide if I can be satisfied and record that decision. *)
      satisfied :=
        output mark <> mark and: [
          strength stronger: output walkStrength].
    )

    public execute = (
      (* Enforce this constraint. Assume that it is satisfied. *)
      self subclassResponsibility
    )

    inputsDo: aBlock = (
      (* I have no input variables. *)
    )

    public markUnsatisfied = (
      (* Record the fact that I am unsatisfied. *)
      satisfied := false.
    )

    public recalculate = (
      (* Calculate the walkabout strength, the stay flag, and, if it is 'stay',
         the value for the current output of this constraint. Assume this
         constraint is satisfied. *)
      output walkStrength: strength.
      output stay: self isInput not.
      output stay ifTrue: [self execute].   (* stay optimization *)
    )
  )

  class StayConstraint var: aVariable strength: strengthSymbol addTo: planner = UnaryConstraint var: aVariable strength: strengthSymbol addTo: planner (
    (* I mark variables that should, with some level of preference, stay the
       same. I have one method with zero inputs and one output, which does
       nothing. Planners may exploit the fact that, if I am satisfied, my output
       will not change during plan execution.
       This is called 'stay optimization.' *)
  ) (
    'execution'
    public execute = (
      (* Stay constraints do nothing. *)
    )
  )
  
  class Variable = (
    (* I represent a constrained variable. In addition to my value, I maintain the
       structure of the constraint graph, the current dataflow graph, and various
       parameters of interest to the DeltaBlue incremental constraint solver.

    Instance variables:
        value           my value; changed by constraints, read by client <Object>
        constraints     normal constraints that reference me <Array of Constraint>
        determinedBy    the constraint that currently determines
                        my value (or nil if there isn't one) <Constraint>
        walkStrength        my walkabout strength <Strength>
        stay            true if I am a planning-time constant <Boolean>
        mark            used by the planner to mark constraints <Number> *)
    | public value        ::= 0.
      public constraints  = Vector new: 2.
      public determinedBy ::= nil.
      public walkStrength ::= Strength absoluteWeakest.
      public stay         ::= true.
      public mark         ::= 0.
    |
  )(
    'access'
    public addConstraint: aConstraint = (
      (* Add the given constraint to the set of all constraints that refer to me. *)
      constraints append: aConstraint.
    )

    public removeConstraint: c = (
      (* Remove all traces of c from this variable. *)
      constraints remove: c.
      determinedBy == c ifTrue: [ determinedBy := nil ].
    )
  ) : (
    public value: aValue = (
      | o |
      o := self new.
      o value: aValue.
      ^ o
    )
  )

  public newInstance = ( ^ DeltaBlue new )
  public setupVerifiedRun: run = ( run innerIterations: 20 )
)
