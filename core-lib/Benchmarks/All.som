(* Copyright (c) 2001-2015 see AUTHORS file

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class AllBenchmarks usingPlatform: platform = (
| private platform = platform.
  private harness  = (platform system loadModule: 'Harness.som' nextTo: self) usingPlatform: platform.
  private system   = platform system.
  private ObjectMirror = platform mirrors ObjectMirror.
  private Run      = harness Run.
  summedAverages ::= 0. |
)(
  class NoReportingRun = Run ()(
    reportBenchmark: bench result: result = ()

    public runBenchmark = (
      self doRuns: benchmarkSuite newInstance
    )
  )

  all = (
    ^ (run: 'Fannkuch'   numIter:   4),
      (run: 'List'       numIter: 100),
      (run: 'Mandelbrot' numIter:   1),
      (run: 'Permute'    numIter: 100),
      (run: 'Queens'     numIter: 100),
      (run: 'Sieve'      numIter: 100),
      (run: 'Storage'    numIter: 100),
      (run: 'Towers'     numIter: 100),
      (run: 'BubbleSort' in: 'Sort' numIter: 100),
      (run: 'QuickSort'  in: 'Sort' numIter: 100),
      (run: 'TreeSort'   in: 'Sort' numIter: 100),

      (run: 'Bounce'      numIter: 100),
      (run: 'DeltaBlue'   numIter: 100),
      (run: 'Richards'    numIter: 1),
      (run: 'GCBench'     numIter: 5),
      (run: 'Json'        numIter: 1),
      (run: 'NBody'       numIter: 1),

      (run: 'Fibonacci'            in: 'LanguageFeatures' numIter: 10),
      (run: 'OuterConstLoop'       in: 'LanguageFeatures' numIter: 10),
      (run: 'FieldLoop'            in: 'LanguageFeatures' numIter: 10),
      (run: 'FieldWrite'           in: 'LanguageFeatures' numIter: 10),
      (run: 'IntegerLoop'          in: 'LanguageFeatures' numIter: 10),
      (run: 'Loop'                 in: 'LanguageFeatures' numIter: 10),
      (run: 'NonLocalReturn'       in: 'LanguageFeatures' numIter: 10),
      (run: 'Exceptions'           in: 'LanguageFeatures' numIter: 10),
      (run: 'Recurse'              in: 'LanguageFeatures' numIter: 10),
      (run: 'Sum'                  in: 'LanguageFeatures' numIter: 10),
      (run: 'WhileLoop'            in: 'LanguageFeatures' numIter: 10),
      (run: 'WhileLoopPoly'        in: 'LanguageFeatures' numIter: 10),
      (run: 'VectorRead'           in: 'LanguageFeatures' numIter: 10),
      
      (run: 'Dispatch'             in: 'LanguageFeatures' numIter: 10),
      (run: 'DispatchNoArg'        in: 'LanguageFeatures' numIter: 10),
      (run: 'DispatchPerformNoArg' in: 'LanguageFeatures' numIter: 10),
    
      (run: 'PageRank'    numIter:  1),
      (run: 'GraphSearch' numIter:  1)
  )
  
  loadModule: name = (
    | file cls |
    file  := name + '.som'.
    cls   := system loadModule: file nextTo: self.
    ^ cls usingPlatform: platform andHarness: harness.
  )

  run: name in: moduleName numIter: numIter = (
    | suite cls |
    suite := self loadModule: moduleName.
    cls := (ObjectMirror reflecting: suite) perform: name asSymbol.
    
    ^ self createRun: cls named: name numIter: numIter
  )

  run: name numIter: numIter = (
    | suite run |
    suite := self loadModule: name.
    ^ self createRun: suite named: name numIter: numIter.
  )
  
  createRun: bench named: name numIter: numIter = (
    | run |
    run := NoReportingRun new.
    run name: name.
    run benchmarkSuite: bench.
    run numIterations: numIter.
    run printAll: false.
    bench setupVerifiedRun: run.
    ^ run
  )
  
  runAll = (
    all do: [:run |
      run runBenchmark.
      report: run.
    ].
    printTotal.
  )

  report: run = (
    '\nBenchmark: ' print. run name println.

    ('   Iterations: ' + run numIterations + ' (elapsed time ' + (run total // 1000) round
        + ' ms)') println.
    ('   AVERAGE: ' + ((run total // run numIterations) // 1000) round + ' ms') println.
    
    summedAverages := summedAverages + (run total // run numIterations).
  )
    
  printTotal = (
    ('\nSummed Average Runtime: ' + (summedAverages // 1000) round asString + ' ms') println.
  )

  public main: args = (
    runAll.
    ^ 0
  )
)
