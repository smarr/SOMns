class ActorTests usingPlatform: platform testFramework: minitest = Value (
| private TestContext = minitest TestContext.
  private AsyncTestContext = minitest AsyncTestContext.
  private actors      = platform actors.
  private Exception   = platform kernel Exception.
  private NotAValue   = platform kernel NotAValue.
  private Vector      = platform kernel Vector.
  private Array       = platform kernel Array.
  private ObjectMirror = platform mirrors ObjectMirror.
  private errorTestMessage = 'test exception 1'.
|
)(
  private class GenericTestException1 new = Exception (
  | public msg |
    msg:: errorTestMessage.
  )()

  class Bob meet: a = (
    | private alice = a. |
  ) (
    public answerFarRef   = ( ^ alice        )
    public answerNearRef  = ( ^ self         )
    public answerValue    = ( ^ 42           )
    public raiseException = ( ^ Exception signal )
  )

  class DeepChain = (
    |exception|
  ) (
    public nestedResolutionWithDepth: n = (
      ^ n > 0 ifTrue:  [ self <-: nestedResolutionWithDepth: n - 1 ]
              ifFalse: [ 'done' ]
    )
    public nestedErrorWithDepth: n with: msg = (
      ^ n > 0 ifTrue:  [ self <-: nestedErrorWithDepth: n - 1 with: exception ]
              ifFalse: [ exception:: GenericTestException1 new.
                         exception signal. ]
    )
  )

  class Math = () (
    public factorial: n = (
      n = 0 ifTrue: [ ^ 1 ].
      ^ (self <-: factorial: n - 1) <-: * n
    )

(* Currently not supported because SOMns's addition doesn't unwrap promises.
   Not sure this is essential/generally useful.
    public fibonacci: n = (
      n = 0 ifTrue: [ ^ 0 ].
      n = 1 ifTrue: [ ^ 1 ].
      ^ (self <-: fibonacci: n - 1) <-: + (self <-: fibonacci: n - 2)
    )
*)
    public isPositive: n = ( ^ n > 0 )
  )

  class Ping = (
    | public other |
  ) (
    public pong: n sum: m = (
      n <= 0 ifTrue: [ ^ m ].
      ^ other <-: ping: n - 1 sum: n + m
    )

    public start = (
      ^ other <-: ping: 10 sum: 0
    )
  )

  class Pong = (
    | public other |
  ) (
    public ping: n sum: m = (
      ^ other <-: pong: n - 1 sum: n + m
    )
  )

  class Recorder = (
    | public recording ::= ''. |
  ) (
    public append: x = (
      recording:: recording + x.
      ^ recording length
    )

    public fail = (
      Exception signal
    )
  )

  class Cell new: val = (
    | public val ::= val. |
  )(
    public valIsFarRef = (
      ^ (ObjectMirror reflecting: val) className = 'FarReference'
    )
  )

  public class BasicsAndWrapping = AsyncTestContext ()(
    public testFarReferenceCannotBeInstantiated = (
      should: [actors FarReference new] signal: Exception
    )

    public testCreateActorReturnsFarReference = (
      | ref |
      ref:: (actors createActorFromValue: DeepChain).
      assert: (ObjectMirror reflecting: ref) className equals: 'FarReference'.
    )

    public testCreatePromise = (
      | promisePair |
      promisePair:: actors createPromisePair.
      assert: (ObjectMirror reflecting: promisePair promise)  className equals: 'Promise'.
      assert: (ObjectMirror reflecting: promisePair resolver) className equals: 'Resolver'.
    )

    public testEventualSendReturnsPromise = (
      | refCellClass cellPromise |
      refCellClass:: (actors createActorFromValue: Cell).
      cellPromise::  refCellClass <-: new: 4.
      assert: (ObjectMirror reflecting: cellPromise) className equals: 'Promise'.
    )

    public testWhenResolvedOnPromiseReturnsPromise = (
      | refCellClass cellPromise result |
      refCellClass:: (actors createActorFromValue: Cell).
      cellPromise::  refCellClass <-: new: 5.
      result:: cellPromise whenResolved: [:r | 5].
      assert: (ObjectMirror reflecting: result) className equals: 'Promise'.
    )

    public testAsyncTurnResultsInFarRef= (
      | bob |
      bob:: (actors createActorFromValue: Bob) <-: meet: self.
      ^ assert: bob <-: answerFarRef resolvedWithObject: self.
    )

    public testAsyncTurnResultsInNearRef= (
      | bobP r |
      bobP:: (actors createActorFromValue: Bob) <-: meet: self.
      r:: bobP whenResolved: [:bob |
          (bob <-: answerNearRef)
            whenResolved: [:bob2 | bob2 = bob ]].
      ^ assert: r resolvedWith: true.
    )

    public testAsyncTurnResultsInValue = (
      | bob |
      bob:: (actors createActorFromValue: Bob) <-: meet: self.
      ^ assert: (bob <-: answerValue) resolvedWith: 42.
    )

    public testAsyncCellInstanceInActorIsFarRef = (
      | p |
      p:: (actors createActorFromValue: Cell) <-: new: 4.
      ^ p whenResolved: [:cellFRef |
        assert: (ObjectMirror reflecting: cellFRef) className equals: 'FarReference'
      ]
    )

    public testAsyncCellPassedAsFarRef = (
      | cellLocal p promisePair |
      cellLocal:: Cell new: 0.
      promisePair:: actors createPromisePair.

      p:: (actors createActorFromValue: Cell) <-: new: cellLocal.
      p whenResolved: [:cellFRef |
        (cellFRef <-: valIsFarRef) whenResolved: [:isFRef |
          assert: isFRef description: 'should be far reference'.
          promisePair resolve: #done.
        ]
      ].
      ^ promisePair promise
    )

    public testAsyncCellReturnedDirect = (
      | cellLocal promisePair p |
      promisePair:: actors createPromisePair.
      cellLocal:: Cell new: 0.
      p:: (actors createActorFromValue: Cell) <-: new: cellLocal.
      p whenResolved: [:cellFRef |
        (cellFRef <-: val) whenResolved: [:c |
          assert: c is: cellLocal.
          promisePair resolve: #done
        ]
      ].
      ^ promisePair promise
    )

    public testIdentityOfFarRefs = (
      | pC1 pC2 c1 c2 pp |
      pp:: actors createPromisePair.

      pC1:: (actors createActorFromValue: Cell) <-: new: 4.
      pC2:: (actors createActorFromValue: Cell) <-: new: 5.

      pC1 whenResolved: [:cellFRef |
        c1:: cellFRef.
        pC2 whenResolved: [:c2FRef |
          deny: c2FRef == c1.
          assert: c1 == cellFRef.
        ].
        pp resolve: nil
      ].
      ^ pp promise
    )

  ) : (
    TEST_CONTEXT = ()
  )

  public class PromiseResolution = AsyncTestContext ()(
    public testAsyncWhenResolvedPromiseResolvesToBlockReturnValue = (
      | promisePair wrPromise assertPromise |
      promisePair:: actors createPromisePair.
      wrPromise:: promisePair promise whenResolved: [:v | v ].

      assertPromise:: wrPromise whenResolved: [:val |
        assert: val equals: 5.
      ].

      promisePair resolve: 5.
      ^ assertPromise
    )

    public testAsyncPromiseOfPromiseResolvesToFinalValue = (
      | promisePair1 promisePair2 assertPromise |
      (* Chained promises should be flattened *)
      promisePair1:: actors createPromisePair.
      promisePair2:: actors createPromisePair.

      assertPromise:: promisePair1 promise whenResolved: [:r |
        assert: r equals: 500.
      ].

      (* This should not yet resolve the promise, instead, it should
         essentially forward it to the 2nd promise and wait for its resolution. *)
      promisePair1 resolve: promisePair2 promise.

      promisePair2 resolve: 500.
      ^ assertPromise
    )

    public testAsyncDeeplyChainedResolution = (
      (* A good implementation should handle this in constant rather than linear space. *)
      | r |
      r:: (actors createActorFromValue: DeepChain) <-: new.
      ^ assert: (r <-: nestedResolutionWithDepth: 10) resolvedWith: 'done'.
    )

    public testAsyncFactorial = (
      | math |
      math:: (actors createActorFromValue: Math) <-: new.
      ^ assert: (math <-: factorial: 9) resolvedWith: 362880.
    )
(*  Currently not supported because SOMns's addition doesn't unwrap promises.
    Not sure this is essential/generally useful.

    public testAsyncFibonacci = (
      | math result |
      math:: (actors createActorFromValue: Math) <-: new.
      ^ assert: (math <-: fibonacci: 9) resolvedWith: 34
    )
*)
    public testAsyncFifo = (
      | recorder r1 r2 r3 r4 |
      recorder:: (actors createActorFromValue: Recorder) <-: new.
      r1:: recorder <-: append: 'a'.
      r2:: recorder <-: append: 'b'.
      r3:: recorder <-: append: 'c'.
      r4:: recorder <-: append: 'd'.

    ^ (assert: (recorder <-: recording) resolvedWith: 'abcd'),
      (assert: r1 resolvedWith: 1),
      (assert: r2 resolvedWith: 2),
      (assert: r3 resolvedWith: 3),
      (assert: r4 resolvedWith: 4)
    )

    public testFifoFailstop = (
      | recorder recorderFork r1 r2 r3 r4 r5 |
      recorder:: (actors createActorFromValue: Recorder) <-: new.

      r1:: recorder <-: append: 'a'.
      r2:: recorder <-: append: 'b'.
      r3:: recorder <-: fail.
      r4:: recorder <-: append: 'c'.
      r5:: recorder <-: append: 'd'.
      assert: (recorder <-: recording) resolvedWith: 'abcd'.
      assert: r1 resolvedWith: 1.
      assert: r2 resolvedWith: 2.
      assert: r3 erroredWith: Exception.
      assert: r4 erroredWith: Exception.
      assert: r5 erroredWith: Exception.
    )

    public testAsyncIfTrue = (
      | math tookTruePath result |
      math:: (actors createActorFromValue: Math) <-: new.
      tookTruePath:: false.

      result:: (math <-: isPositive: 9) <-: ifTrue: [tookTruePath:: true. 7].
      ^ result whenResolved: [:r |
        assert: r equals: 7.
        assert: tookTruePath.
      ]
    )

    public testAsyncNestedResolutionOrder = (
      | a b last x tmp |
      a::    actors createPromisePair.
      b::    actors createPromisePair.
      last:: actors createPromisePair.
      x:: Vector new.

      a promise whenResolved: [:r | x append: 'a1'].
      b promise whenResolved: [:r | x append: 'b2'].

      tmp:: a promise whenResolved: [:r | x append: 'a3'].
      tmp whenResolved: [:r | x append: 'a3a'].
      tmp whenResolved: [:r | x append: 'a3b'].

      tmp:: b promise whenResolved: [:r | x append: 'b4'].
      tmp whenResolved: [:r | x append: 'b4a'].
      tmp whenResolved: [:r | x append: 'b4b'].

      b resolve: a promise.
      tmp:: a promise whenResolved: [:r | x append: 'a5'].
      tmp whenResolved: [:r | x append: 'a5a'].
      tmp whenResolved: [:r | x append: 'a5b'].

      tmp:: b promise whenResolved: [:r | x append: 'b6'].
      tmp whenResolved: [:r | x append: 'b6a'].
      tmp whenResolved: [:r | x append: 'b6b'].

      tmp:: a promise whenResolved: [:r | x append: 'a7'].
      tmp whenResolved: [:r | x append: 'a7a'].
      tmp whenResolved: [:r | x append: 'a7b'].

      tmp:: b promise whenResolved: [:r | x append: 'b8'].
      tmp whenResolved: [:r | x append: 'b8a'].
      tmp whenResolved: [:r | x append: 'b8b'. last resolve: x].
      a resolve: nil.

      ^ last promise whenResolved: [:vec |
        | expected |
        expected:: Vector new.
        expected, #a1, #a3, #a5, #a7, #b2, #b4, #b6, #b8, #a3a, #a3b, #a5a, #a5b, #a7a, #a7b, #b4a, #b4b, #b6a, #b6b, #b8a, #b8b.

        assert: vec size equals: expected size.

        vec doIndexes: [:i |
          assert: (vec at: i) equals: (expected at: i) ]
      ]
    )

    public testAsyncPingPong = (
      | ping pong result |
      ping:: (actors createActorFromValue: Ping) <-: new.
      pong:: (actors createActorFromValue: Pong) <-: new.

      ping <-: other: pong.
      pong <-: other: ping.
      ^ assert: (ping <-: start) resolvedWith: 55.
    )

    public testTurnResultsInException = (
      | bob |
      bob:: (actors createActorFromValue: Bob) <-: meet: self.
      assert: (bob <-: raiseException) erroredWith: Exception.
    )

    (* Test promise chaining *)
    public testAsyncFirstResolvedThenChainedThenRegistered123 = (
      | pp ppChained |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.

      (* resolve 1 *)
      pp resolver resolve: 11.
      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* register 3 *)
      ^ ppChained promise whenResolved: [:v |
        assert: v equals: 11 ]
    )

    public testAsyncFirstResolvedThenRegisteredThenChained132 = (
      | pp ppChained resultProm |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.

      (* resolve 1 *)
      pp resolver resolve: 11.
      (* register 3 *)
      resultProm:: (ppChained promise whenResolved: [:v |
        assert: v equals: 11 ]).
      (* chain 2 *)
      ppChained resolver resolve: pp promise.

      ^ resultProm
    )

    public testAsyncFirstChainedThenResolvedThenRegistered213 = (
      | pp ppChained |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.

      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* resolve 1 *)
      pp resolver resolve: 11.
      (* register 3 *)
      ^ ppChained promise whenResolved: [:v |
        assert: v equals: 11 ]
    )

    public testAsyncFirstChainedThenRegisteredThenResolved231 = (
      | pp ppChained resultProm |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.

      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* register 3 *)
      resultProm:: ppChained promise whenResolved: [:v |
        assert: v equals: 11 ].
      (* resolve 1 *)
      pp resolver resolve: 11.

      ^ resultProm
    )

    public testAsyncFirstRegisteredThenResolvedThenChained312 = (
      | pp ppChained resultProm |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.

      (* register 3 *)
      resultProm:: ppChained promise whenResolved: [:v |
        assert: v equals: 11 ].
      (* resolve 1 *)
      pp resolver resolve: 11.
      (* chain 2 *)
      ppChained resolver resolve: pp promise.

      ^ resultProm
    )

    public testAsyncFirstRegisteredThenChainedThenResolved321 = (
      | pp ppChained resultProm |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.

      (* register 3 *)
      resultProm:: ppChained promise whenResolved: [:v |
        assert: v equals: 11 ].
      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* resolve 1 *)
      pp resolver resolve: 11.

      ^ resultProm
    )
  ) : (
    TEST_CONTEXT = ()
  )

  public class Iteration = AsyncTestContext ()(
    public testAsyncCollectionDo = (
      | i arr prom |
      i:: 0.
      arr:: Array new: 5.

      prom:: actors async: arr do: [:e |
        | p |
        (* Block needs to return promise, because it is meant for things
           that are completed asynchronously. *)
        p:: actors createPromisePair.
        p resolve: i.
        i:: i + 1.
        p promise
      ].

      ^ prom whenResolved: [:r | assert: i equals: 5 ]
    )

    public testAsyncToDo = (
      | v prom |
      v:: Vector new.

      prom:: actors async: 1 to: 10 do: [:i |
        | p |
        p:: actors createPromisePair.
        p resolve: i.
        v append: i.
        p promise ].

      ^ prom whenResolved: [:r |
        assert: v size equals: 10.
        1 to: 10 do: [:i |
          assert: (v at: i) equals: i ] ]
    )

    public testAsyncWhileTrue = (
      | cnt prom |
      cnt:: 0.

      prom:: actors async: [cnt < 10] whileTrue: [
        | p |
        cnt:: cnt + 1.
        p:: actors createPromisePair.
        p resolve: cnt.
        p promise ].

      ^ prom whenResolved: [:r |
        assert: cnt equals: 10.
      ]
    )

    public testAsyncWhileTrueCond = (
      | cnt prom cntCond |
      cnt:: 0.
      cntCond:: 0.

      prom:: actors async: [cntCond:: cntCond + 1. cnt < 10] whileTrue: [
        | p |
        cnt:: cnt + 1.
        p:: actors createPromisePair.
        p resolve: cnt.
        p promise ].

      ^ prom whenResolved: [:r |
        assert: cnt equals: 10.
        assert: cntCond equals: 11.
      ]
    )
  ) : (
    TEST_CONTEXT = ()
  )

  public class TimeoutTest = AsyncTestContext ()(
    public testAsyncTimeoutWorking = (
      | p |
      p:: actors createPromisePair.
      actors after: 50 do: [
        p resolve: true.
      ].
      ^ (assert: p promise resolvedWith: true).
    )

    public testAsyncTimeoutOrder = (
      | p done |
      p:: actors createPromisePair.
      actors after: 50 do: [
        assert: done.
        p resolve: true.
      ].

      actors after: 25 do: [
        done:: true.
      ].

      ^ (assert: p promise resolvedWith: true).
    )
  ) : (
    TEST_CONTEXT = ()
  )

  private class MutableObject = (
  | private foo ::= 0. |
  )(
    public class ImmutableObject = ()()
  )

  private class ImmutableObject = Value ()(
    public class MutableObject = (
    | private foo ::= 0. |
    )()
  )

  public class RegressionTests = AsyncTestContext ()(
    (* This test is to identify issues in the OuterObjectRead node.
       It did not handle properly the different cases of outer scope
       semantics, depending on the point in the inheritance tree, i.e.,
       starting lexical scope. *)
    public testFarReferenceLookupInKernel = (
      | ref |
      ref:: (actors createActorFromValue: DeepChain).
      assert: ref asString println equals: 'instance of FarReference'.
    )

    public testRaiseNotAValueExceptionForActorCreation = (
      | mut |
      mut:: MutableObject new.
      should: [actors createActorFromValue: mut ImmutableObject] signal: NotAValue
    )

    public testShouldntRaiseNotAValueExceptionForActorCreation = (
      | imm |
      imm:: ImmutableObject new.
      shouldnt: [actors createActorFromValue: MutableObject] signal: NotAValue.
      shouldnt: [actors createActorFromValue: ImmutableObject] signal: NotAValue.
      shouldnt: [actors createActorFromValue: imm MutableObject] signal: NotAValue.
    )
  ) : (
    TEST_CONTEXT = ()
  )

  public class PromiseErrored = AsyncTestContext (
  | private Exception = kernel Exception. aliceValue = 10. bobValue = 20.|
  )(
     private class NoExceptionReceivedException signal = Exception (
        | public msg |
        msg:: 'received value, expected exception'.
        self signal.
    )()

    private class Alice new = (
    | exception |
      exception:: GenericTestException1 new.
    )(
      public method =        ( ^ aliceValue )
      public methodFailing = ( exception signal )
    )

    private class Bob new: a = (
    | exception alice promise |
      alice:: a.
      exception:: GenericTestException1 new.
    )(
      public send = ( ^ alice <-: method )
      public sendFailing = ( ^ alice <-: methodFailing )
      public sendFailingAndHandle = (
        promise:: alice <-: methodFailing.
        ^ promise
            whenResolved: [:v | NoExceptionReceivedException signal ]
                 onError: [:e | bobValue ]
      )
    )

    public testAsyncOnErrorPromiseErrorsToException = (
      | promisePair wrPromise assertPromise exception |
      promisePair:: actors createPromisePair.
      exception:: GenericTestException1 new.
      wrPromise:: promisePair promise
        whenResolved: [ :v | NoExceptionReceivedException signal ]
        onError: [ :ex | ex ].

      assertPromise:: wrPromise whenResolved: [:v | assert: v msg equals: exception msg ].

      promisePair error: exception.
      ^ assertPromise
    )

    public testAsyncPromiseOfPromiseResolvesToException = (
      | promisePair1 promisePair2 assertPromise exception|
      (* Chained promises should be flattened *)
      promisePair1:: actors createPromisePair.
      promisePair2:: actors createPromisePair.
      exception:: GenericTestException1 new.


      assertPromise:: promisePair1 promise
          whenResolved: [:v | NoExceptionReceivedException signal]
          onError: [:e | assert: e msg equals: exception msg].

      (* This should not yet resolve the promise, instead, it should
         essentially forward it to the 2nd promise and wait for its resolution. *)
      promisePair1 resolve: promisePair2 promise.
      promisePair2 error: exception.
      ^ assertPromise
    )

    public testAsyncDeeplyChainedErroring = (
      (* A good implementation should handle this in constant rather than linear space. *)
      | r sendPromise assertPromise tempPromise|
      r:: (actors createActorFromValue: DeepChain) <-: new.
      sendPromise:: r <-: nestedErrorWithDepth: 10 with: errorTestMessage.
      tempPromise:: sendPromise
        whenResolved: [:v | NoExceptionReceivedException signal ]
             onError: [:e | e <-: msg ].
      assertPromise:: tempPromise whenResolved: [:v | assert: v equals: errorTestMessage ].
      ^ assertPromise.
    )

    public testCorrectMessageIsNotCaught = (
      | a messagePromise assertPromise |
      a:: Alice new.
      messagePromise:: a<-:method.
      assertPromise:: messagePromise
        whenResolved: [:v | assert: v equals: aliceValue ]
             onError: [:e | e signal ].
      ^ assertPromise
    )

    public testExceptionIsCaught = (
      | a messagePromise assertPromise |
      a:: Alice new.
      messagePromise:: a <-: methodFailing.
      assertPromise:: messagePromise
          whenResolved: [:v | NoExceptionReceivedException signal ]
               onError: [:e | assert: e msg equals: errorTestMessage ].
      ^ assertPromise
    )

     public testCorrectChainedMessageIsNotCaught = (
       | a b messagePromise assertPromise |
       a:: Alice new.
       b:: Bob new: a.
       messagePromise:: b <-: send.
       assertPromise:: messagePromise
           whenResolved: [:v | assert: v equals: aliceValue ]
                onError: [:e | e signal ].
        ^ assertPromise
    )

    public testChainedExceptionIsCaught = (
      | a b messagePromise assertPromise |
      a:: Alice new.
      b:: Bob new: a.
      messagePromise:: b <-: sendFailing.
      assertPromise:: messagePromise
          whenResolved: [:v | NoExceptionReceivedException signal ]
               onError: [:e | assert: e msg equals: errorTestMessage ].
      ^ assertPromise
    )

    public testChainedAndHandleExceptionIsNotCaught = (
      | a b messagePromise assertPromise |
      a:: Alice new.
      b:: Bob new: a.
      messagePromise:: b <-: sendFailingAndHandle.
      assertPromise:: messagePromise
          whenResolved: [:v | assert: v equals: bobValue ]
               onError: [:e | e signal ].
      ^ assertPromise
    )

    public testAsyncFirstErroredThenChainedThenRegistered123 = (
      | pp ppChained exception |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.
      exception:: GenericTestException1 new.

      (* resolve 1 *)
      pp resolver error: exception.
      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* register 3 *)
      ^ pp promise onError: [:v | assert: v msg equals: errorTestMessage ]
    )

    public testAsyncFirstErroredThenRegisteredThenChained132 = (
      | pp ppChained assertPromise exception |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.
      exception:: GenericTestException1 new.

      (* resolve 1 *)
      pp resolver error: exception.
      (* register 3 *)
      assertPromise:: (ppChained promise onError: [:v | assert: v msg equals: errorTestMessage ]).
      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      ^ assertPromise
    )

    public testAsyncFirstChainedThenErroredThenRegistered213 = (
      | pp ppChained exception|
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.
      exception:: GenericTestException1 new.

      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* resolve 1 *)
      pp resolver error: exception.
      (* register 3 *)
      ^ ppChained promise onError: [:v | assert: v msg equals: errorTestMessage ]
    )

    public testAsyncFirstChainedThenRegisteredThenErrored231 = (
      | pp ppChained assertPromise exception |
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.
      exception:: GenericTestException1 new.

      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* register 3 *)
      assertPromise:: ppChained promise onError: [:v | assert: v msg equals: errorTestMessage ].
      (* resolve 1 *)
      pp resolver error: exception.
      ^ assertPromise
    )

    public testAsyncFirstRegisteredThenErroredThenChained312 = (
      | pp ppChained assertPromise exception|
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.
      exception:: GenericTestException1 new.

      (* register 3 *)
      assertPromise:: ppChained promise onError: [:v | assert: v msg equals: errorTestMessage ].
      (* resolve 1 *)
      pp resolver error: exception.
      (* chain 2 *)
      ppChained resolver resolve: pp promise.

      ^ assertPromise
    )

    public testAsyncFirstRegisteredThenChainedThenErrored321 = (
      | pp ppChained assertPromise exception|
      pp::           actors createPromisePair.
      ppChained::    actors createPromisePair.
      exception:: GenericTestException1 new.

      (* register 3 *)
      assertPromise:: ppChained promise onError: [:v | assert: v msg equals: errorTestMessage ].
      (* chain 2 *)
      ppChained resolver resolve: pp promise.
      (* resolve 1 *)
      pp resolver error: exception.

      ^ assertPromise
    )

  ) : (
    TEST_CONTEXT = ()
  )
)
