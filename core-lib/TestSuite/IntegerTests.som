(* Copyright (c) 2007-2015 see AUTHORS file

Software Architecture Group, Hasso Plattner Institute, Potsdam, Germany
http://www.hpi.uni-potsdam.de/swa/

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the 'Software'), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*)
class IntegerTests usingPlatform: platform testFramework: minitest = (
| private TestContext  = minitest TestContext.
  private ObjectMirror = platform mirrors ObjectMirror.
  private Integer      = platform kernel Integer.
  private Vector       = platform kernel Vector.
|)(
  public class IntegerTest = TestContext ()(

    public testBasicNumberCoercionToInteger = (
      self assert: 5.0 equals: 25 sqrt.
      self assert: 1 equals: (2 // 4) * 2.
      self assert: 1 equals: 2 * (2 // 4).
    )

    public testEqualityAndIdentity = (
      | a b |
      a := 42.
      b := 42.
    
      self assert: a = b.  (* Integers are equal based on their value *)

      (* Sometimes it can be hard to implement efficiently, but it SHOULD really
       be true for all values of integers. *)
      a := 1 << 30.  b := 1 << 30.
      self assert: a equals: b.
    
      a := 1 << 32.  b := 1 << 32.
      self assert: a equals: b.
    
      a := 1 << 60.  b := 1 << 60.
      self assert: a equals: b.
    
      a := 1 << 70.  b := 1 << 70.
      self assert: a equals: b.
    
      a := 1 << 100.  b := 1 << 100.
      self assert: a equals: b.
    )
    
    public testClassAndValueRanges = (
      | i |
      self assert: #Integer equals: (ObjectMirror reflecting: -42) className.
      self assert: #Integer equals: (ObjectMirror reflecting:   0) className.
      self assert: #Integer equals: (ObjectMirror reflecting:  23) className.
      self assert: #Integer equals: (ObjectMirror reflecting:  1073741823) className.
      self assert: #Integer equals: (ObjectMirror reflecting:  1073741824) className.
    
      (* Let's test for size behavior and corresponding class *)
      i := 1 << 30.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i > 0 description: 'should not overflow'.
      self assert: '1073741824' equals: i asString.
    
      i := 1 << 32.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i > 0 description: 'should not overflow'.
      self assert: '4294967296' equals: i asString.
    
      i := 1 << 60.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i > 0 description: 'should not overflow'.
      self assert: '1152921504606846976' equals: i asString.
    
      i := 1 << 70.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i > 0 description: 'should not overflow'.
      self assert: '1180591620717411303424' equals: i asString.
    
      i := -1 << 30.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i < 0 description: 'should not underflow'.
      self assert: '-1073741824' equals: i asString.
    
      i := -1 << 32.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i < 0 description: 'should not underflow'.
      self assert: '-4294967296' equals: i asString.
    
      i := -1 << 60.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i < 0 description: 'should not underflow'.
      self assert: '-1152921504606846976' equals: i asString.
    
      i := -1 << 70.
      self assert: #Integer equals: (ObjectMirror reflecting: i) className.
      self assert: i < 0 description: 'should not underflow'.
      self assert: '-1180591620717411303424' equals: i asString.
    )
            
    public testStringConversion = (
      self assert:  '0' equals: ( 0 asString).
      self assert:  '1' equals: ( 1 asString).
      self assert:  '2' equals: ( 2 asString).
      self assert: '-1' equals: (-1 asString).
      self assert: '-2' equals: (-2 asString).
    
      self assert:  1 equals: (Integer fromString:  '1').
      self assert: -1 equals: (Integer fromString: '-1').
      self assert: 42 equals: (Integer fromString: '42').
    
      self assert: 42 equals: '42' asInteger.
      self assert: -2 equals: '-2' asInteger.
    )
          
    public testRangeBorders = (
      self assert:   '536870911' equals:   536870911 asString.
      self assert:   '536870912' equals:   536870912 asString.
      self assert:   '536870913' equals:   536870913 asString.
      self assert:  '1073741823' equals:  1073741823 asString.
      self assert:  '1073741824' equals:  1073741824 asString.
      self assert:  '1073741825' equals:  1073741825 asString.
      self assert:  '2147483647' equals:  2147483647 asString.
      self assert:  '-536870911' equals:  -536870911 asString.
      self assert:  '-536870912' equals:  -536870912 asString.
      self assert:  '-536870913' equals:  -536870913 asString.
      self assert: '-1073741823' equals: -1073741823 asString.
      self assert: '-1073741824' equals: -1073741824 asString.
      self assert: '-1073741825' equals: -1073741825 asString.
      self assert: '-2147483647' equals: -2147483647 asString.
      self assert: '-2147483648' equals: -2147483648 asString.
    )
          
    public testComparisons = (
      self assert: ( 9 =  9).
      self deny:   ( 1 =  2).
      self deny:   ( 0 <  0).
      self assert: ( 1 <  2).
      self deny:   ( 2 <  1).
      self assert: (-3 <  2).
      self deny:   ( 3 < -2).
      self deny:   ( 0 >  0).
      self deny:   ( 1 >  2).
      self assert: ( 2 >  1).
      self deny:   (-3 >  2).
      self assert: ( 3 > -2).
      self assert: ( 4 >= 3).
      self assert: ( 3 >= 3).
      self deny:   ( 2 >= 3).
      self assert: ( 2 <= 4).
      self assert: ( 3 <= 3).
      self deny:   ( 4 <= 3).
    )

    public testAddition = (
      self assert: 0 equals: ( 0+0).
      self assert: 1 equals: ( 1+0).
      self assert: 1 equals: ( 0+1).
      self assert: 2 equals: ( 1+1).
      self assert: 0 equals: (-1+1).
      self assert: 1 equals: (-1+2).
    )

    public testSubtraction = (
      self assert:  1 equals: (1-0).
      self assert: -1 equals: (0-1).
      self assert:  1 equals: (2-1).
    )

    public testMultiplication = (
      self assert:   0 equals: ( 1*  0).                     
      self assert:  -1 equals: (-1*  1).                   
      self assert: -25 equals: ( 5* -5).                    
      self assert:  12 equals: (-3* -4).
    )

    public testDivision = (
      self assert:  1 equals: (  1/  1).
      self assert:  1 equals: (  3/  2).
      self assert: -2 equals: (  4/ -2).
      self assert: -2 equals: ( -6/  3).
      self assert:  3 equals: (-12/ -4).

      self assert:  3 equals: 7 / 2.0.
      self assert:  2 equals: 7 / 3.5.
    )

    public testDouble = (
      self assert:  6 equals: ( 36//  6).
      self assert: -5 equals: (-10//  2).
      self assert: -4 equals: ( 20// -5).
      self assert:  1 equals: ( -5// -5).
    )
          
    public testModulo = (
      self assert:  1 equals: ( 10 %  3).
      self assert: -2 equals: ( 10 % -3).
      self assert:  2 equals: (-10 %  3).
      self assert: -1 equals: (-10 % -3).
    
      self assert:  1 equals: ( 10 rem:  3).
      self assert:  1 equals: ( 10 rem: -3).
      self assert: -1 equals: (-10 rem:  3).
      self assert: -1 equals: (-10 rem: -3).
    )

    public testAbsoluteValue = (
      self assert: 4 equals: (-4 abs).
      self assert: 4 equals: ( 4 abs).
    )

    public testNegated = (
      self assert: -23 equals: ( 23 negated).
      self assert:  23 equals: (-23 negated).
    )

    public testSquareRoot = (
      self assert:     5.0 equals: 25 sqrt.
      self assert: #Double equals: (ObjectMirror reflecting: 25 sqrt) className.
    )

    public testAnd = (
      self assert: 0 equals: (2 & 1).
      self assert: 2 equals: (2 & 2).
    )
  
    public testBitXor = (
      self assert: 0 equals: (1 bitXor: 1).
      self assert: 3 equals: (2 bitXor: 1).
    )
  
    public testAs32BitUnsignedValue = (
      self assert: 1 <<  1 equals: (1 <<  1) as32BitUnsignedValue.
      self assert: 1 << 10 equals: (1 << 10) as32BitUnsignedValue.
      self assert: 1 << 31 equals: (1 << 31) as32BitUnsignedValue.
      self assert:       0 equals: (1 << 32) as32BitUnsignedValue.
      self assert: 4294967295 equals:     -1 as32BitUnsignedValue.
    )

    public testAs32BitSignedValue = (
      self assert:     1 <<  1 equals: (1 <<  1) as32BitSignedValue.
      self assert:     1 << 10 equals: (1 << 10) as32BitSignedValue.
      self assert: -2147483648 equals: (1 << 31) as32BitSignedValue.
      self assert:           0 equals: (1 << 32) as32BitSignedValue.
    )
  
    public testUnsignedRightShift = (
      self assert: 0   equals:    1 >>> 1.
      self assert: 512 equals: 1024 >>> 1.
      self assert: 127 equals: 1023 >>> 3.
    
      (* not sure whether we should really insist on this *)
      self assert: 9223372036854775807 equals:    -1 >>> 1.
      self assert: 9223372036854775296 equals: -1024 >>> 1.
    )
    
    public testMinMax = (
      assert: (0 min: 1) equals: 0.
      assert: (1 min: 0) equals: 0.
      assert: (1 max: 0) equals: 1.
      assert: (0 max: 1) equals: 1.
    )
    
    public testToByDo = (
      | v |
      v := Vector new.
      0 to: 10 by: 2 do: [:i |
        v append: i ].
      
      assert: v size equals: 6.
      assert: (v at: 1) equals:  0.
      assert: (v at: 2) equals:  2.
      assert: (v at: 3) equals:  4.
      assert: (v at: 4) equals:  6.
      assert: (v at: 5) equals:  8.
      assert: (v at: 6) equals: 10.
    )
    
    public testDownToByDo = (
      | v |
      v := Vector new.
      10 downTo: 0 by: 2 do: [:i |
        v append: i ].

      assert: v size equals: 6.
      assert: (v at: 1) equals: 10.
      assert: (v at: 2) equals:  8.
      assert: (v at: 3) equals:  6.
      assert: (v at: 4) equals:  4.
      assert: (v at: 5) equals:  2.
      assert: (v at: 6) equals:  0.
    )
  ) : ( TEST_CONTEXT = () )
)
