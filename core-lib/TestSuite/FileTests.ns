class FileTests usingPlatform: platform testFramework: minitest = Value (
| private TestContext = minitest TestContext.
  private Exception   = platform kernel Exception.
  private ArgumentError = platform kernel ArgumentError.
  private ObjectMirror = platform mirrors ObjectMirror.

  private FilePath    = platform files FilePath.
  private FilePattern = platform files FilePattern.
  private FileNotFoundException = platform files FileNotFoundException.
  private IOException = platform files IOException.

  private modulePath = (ObjectMirror reflecting: self) classMirror classDefinition filePath.
|)(
  public class BasicFileTests = TestContext (
  | private path = ((FilePath for: modulePath)
                      containingDirectory
                      containingDirectory
                      containingDirectory / 'tests' / 'files') pattern. |
  )(
    public testUtils = (
      | a b |
      a:: FilePath for: path + '/data/A'.
      assert: a exists description: path + '/data/A is expected to exist.'.
      assert: a size equals: 3656.
      assert: a lastModified <> nil description: 'file should have a last modified date'.
      b:: FilePath for: a containingDirectory pattern.
      assert: b entries size equals: 3.
    )

    public testClose = (
      | fp f |
      fp:: FilePath for: path + '/data/A'.
      f:: fp open: #read.

      deny: f isClosed.
      f close.
      assert: f isClosed.

      (* what happens if we close it again?
         should be an idempotent operation *)
      f close.
      assert: f isClosed.
    )

    public testCreateDeleteFile = (
      | f |
      f:: FilePath for: path + '/temp/A'.
      (FilePath for: (f containingDirectory pattern)) createDirectory.
      deny: f exists.
      f open: #readWrite.
      assert: f exists.
      f deleteFile.
      deny: f exists.
    )

    public testCreateDeleteDirectory = (
      | f |
      f:: FilePath for: path + '/temp/A'.
      deny: f exists.
      f createDirectory.
      assert: f exists.
      f deleteDirectory.
      deny: f exists.
    )

    public testRead = (
      | f d err |
      f:: FilePath for: path + '/data/A'.
      assert: f exists.

      d:: f open: #read.

      d write: 100 at: 0 ifFail: [:e | err:: e ].
      assert: err equals: #ReadOnlyMode.
      d close.
      assert: d isClosed.

      d readAt: 0 ifFail: [:s | err:: s ].
      assert: err equals: #FileIsClosed.
    )

    public testWrite = (
      | f d err |
      f:: FilePath for: path + '/tmp'.
      deny: f exists.

      d:: f open: #write.

      deny: d isClosed.

      assert: d size equals: 0.

      0 to: 255 do:[ :i|
        d buffer at: i + 1 put: i - 128.
      ].

      d write: 256 at: 0.
      assert: d size equals: 256.

      should: [ d readAt: 0 ] signal: IOException.
      d readAt: 0 ifFail: [:s | err:: s ].
      assert: err equals: #WriteOnlyMode.

      0 to: 255 do:[ :i|
        assert: (d buffer at: i + 1) equals: i - 128.
      ].

      d close.
      assert: d isClosed.

      d write: 100 at: 0 ifFail: [:e | err:: e ].
      assert: err equals: #FileIsClosed.

      f deleteFile.
      deny: f exists.
    )

    public testReadWrite = (
      | f d |
      f:: FilePath for: path + '/tmp'.
      deny: f exists.
      d:: f open: #readWrite.

      assert: d size equals: 0.

      0 to: 255 do:[ :i|
        d buffer at: i + 1 put: i - 128 ].

      d write: 256 at: 0.
      assert: d size equals: 256.
      assert: 256 equals: (d readAt: 0).

      0 to: 255 do:[ :i|
        assert: (d buffer at: i + 1) equals: i - 128.
      ].

      d close.

      f deleteFile.
      deny: f exists.
    )

    public testPaths = (
      | f cnt |
      cnt:: 0.
      f:: FilePattern for: path + '/data/*'.
      f pathsDo: [ :p |
        assert: p exists.
        cnt:: cnt + 1.
      ].
      assert: cnt = 3.
    )

    public testMove = (
      | f g |
      f:: FilePath for: path + '/tmp'.
      f open: #readWrite.

      f copyNamed: 'tmp2'.
      g:: FilePath for: path + '/tmp2'.
      assert: g exists.
      assert: f exists.
      assert: g size equals: f size.

      g deleteFile.
      deny: g exists.

      f moveAs: g.
      assert: g exists.
      deny: f exists.

      g deleteFile.
    )

    public testFileNotFound = (
      | f d |
      f:: FilePath for: path + '/nonExisting'.
      deny: f exists description: 'The file ' + f name asString + ' should not exist.'.
      d:: f open: #read ifFail: [:err |
        assert: err equals: #FileNotFound.
        #FileNotFoundSuccessfullyRetrieved ].

      assert: d equals: #FileNotFoundSuccessfullyRetrieved.

      d:: f open: #read ifFail: [:err |
        assert: err equals: #FileNotFound.
        ^ self ].

      assert: false description: 'Should not reach here because of return above.'
    )

    public testFileNotFoundException = (
      | f |
      f:: FilePath for: path + '/nonExisting'.
      deny: f exists description: 'The file ' + f name asString + ' should not exist.'.
      should: [ f open: #read ] signal: FileNotFoundException.
    )

    public testInvalidAccessMode = (
      | f |
      f:: FilePath for: path + '/nonExisting'.

      should: [ f open: #readr     ] signal: ArgumentError.
      should: [ f open: #Read      ] signal: ArgumentError.
      should: [ f open: #Write     ] signal: ArgumentError.
      should: [ f open: #ReadWrite ] signal: ArgumentError.
      should: [ f open: 0          ] signal: ArgumentError.
      should: [ f open: 'read'     ] signal: ArgumentError.
      should: [ f open: 3423       ] signal: ArgumentError.
      should: [ f open: Object new ] signal: ArgumentError.
    )

    public testFilePathSize = (
      | fp f |
      fp:: FilePath for: path + '/data/A'.
      assert: fp size equals: 3656.

      fp:: FilePath for: path + '/nonExisting'.
      should: [ fp size ] signal: FileNotFoundException.
    )
  ) : (
    TEST_CONTEXT = ()
  )
)
