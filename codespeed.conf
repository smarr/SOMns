# Config file for ReBench
# Config format is YAML (see http://yaml.org/ for detailed spec)
default_data_file: 'codespeed.data'
default_experiment: SOMns

reporting:
    # results can also be reported to a codespeed instance
    # see: https://github.com/tobami/codespeed
    codespeed:
        url: https://somns-speed.stefan-marr.de/result/add/json/

runs:
  min_iteration_time: 5

# definition of benchmark suites
benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD " core-lib/Benchmarks/Harness.ns %(benchmark)s "
        max_invocation_time: 600
        invocations: 3
        benchmarks:
            - CD:
                extra_args: "1 0 2"
                codespeed_name: "1st.CD"
            - Havlak:
                extra_args: "1 0 1"
                codespeed_name: "1st.Havlak"
            - Richards:
                extra_args: "1 0 1"
                codespeed_name: "1st.Richards"
            - RichardsNS:
                extra_args: "1 0 1"
                codespeed_name: "1st.RichardsNS"
            - DeltaBlue:
                extra_args: "1 0 200"
                codespeed_name: "1st.DeltaBlue"
            - DeltaBlueNS:
                extra_args: "1 0 200"
                codespeed_name: "1st.DeltaBlueNS"
            - Mandelbrot:
                extra_args: "1 0 50"
                codespeed_name: "1st.Mandelbrot"
            - NBody:
                extra_args: "1 0 10000"
                codespeed_name: "1st.NBody"
            - Json:
                extra_args: "1 0 2"
                codespeed_name: "1st.Json"
            - GraphSearch:
                extra_args: "1 0 1"
                codespeed_name: "1st.GraphSearch"
            - PageRank:
                extra_args: "1 0 100"
                codespeed_name: "1st.PageRank"
            - LeeTM:
                extra_args: "1 0 4"
                codespeed_name: "1st.Lee"
            - Vacation:
                extra_args: "1 0 8"
                codespeed_name: "1st.Vacation"
            - Splay:
                extra_args: "1 0 1"
                codespeed_name: "1st.Splay"
    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 6000
        warmup: 30
        benchmarks:
            - CD:
                extra_args: "130 0 100"
                codespeed_name: "peak.CD"
            - Havlak:
                extra_args: "130 0 5"
                codespeed_name: "peak.Havlak"
            - Richards:
                extra_args: "130 0 60"
                codespeed_name: "peak.Richards"
            - RichardsNS:
                extra_args: "130 0 60"
                codespeed_name: "peak.RichardsNS"
            - DeltaBlue:
                extra_args: "250 0 1000"
                codespeed_name: "peak.DeltaBlue"
                warmup: 150
            - DeltaBlueNS:
                extra_args: "250 0 1000"
                codespeed_name: "peak.DeltaBlue"
                warmup: 150
            - Mandelbrot:
                extra_args: "110 0 400"
                codespeed_name: "peak.Mandelbrot"
                warmup: 10
            - NBody:
                extra_args: "120 0 150000"
                codespeed_name: "peak.NBody"
                warmup: 20
            - Json:
                extra_args: "120 0 50"
                codespeed_name: "peak.Json"
                warmup: 20
            - GraphSearch:
                extra_args: "250 0 15"
                codespeed_name: "peak.GraphSearch"
                warmup: 100
            - PageRank:
                extra_args: "120 0 500"
                codespeed_name: "peak.PageRank"
                warmup: 20
            - LeeTM:
                extra_args: "150 0 2"
                codespeed_name: "peak.Lee"
            - Vacation:
                extra_args: "150 0 7"
                codespeed_name: "peak.Vacation"
            - Splay:
                extra_args: "150 0 1"
                codespeed_name: "peak.Splay"

    som-startup:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 600
        invocations: 3
        benchmarks:
            - Fannkuch:
                extra_args: "1 0 7"
                codespeed_name: "1st.Fannkuch"
            - List:
                extra_args: "1 0 50"
                codespeed_name: "1st.List"
            - Bounce:
                extra_args: "1 0 20"
                codespeed_name: "1st.Bounce"
            - Permute:
                extra_args: "1 0 10"
                codespeed_name: "1st.Permute"
            - Queens:
                extra_args: "1 0 10"
                codespeed_name: "1st.Queens"
            - Storage:
                extra_args: "1 0 20"
                codespeed_name: "1st.Storage"
            - Sieve:
                extra_args: "1 0 100"
                codespeed_name: "1st.Sieve"
            - Towers:
                extra_args: "1 0 20"
                codespeed_name: "1st.Towers"

    som-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        max_invocation_time: 600
        warmup: 10
        benchmarks:
            - Fannkuch:
                extra_args: "55 0 9"
                codespeed_name: "peak.Fannkuch"
                warmup: 5
            - List:
                extra_args: "70 0 1000"
                codespeed_name: "peak.List"
                warmup: 20
            - Bounce:
                extra_args: "60 0 1000"
                codespeed_name: "peak.Bounce"
            - Permute:
                extra_args: "60 0 500"
                codespeed_name: "peak.Permute"
            - Queens:
                extra_args: "120 0 400"
                codespeed_name: "peak.Queens"
                warmup: 70
            - Storage:
                extra_args: "75 0 1000"
                codespeed_name: "peak.Storage"
                warmup: 25
            - Sieve:
                extra_args: "60 0 400"
                codespeed_name: "peak.Sieve"
            - Towers:
                extra_args: "60 0 300"
                codespeed_name: "peak.Towers"

    sort-startup:
        gauge_adapter: RebenchLog
        command: &SORT_CMD " core-lib/Benchmarks/Harness.ns Sort.%(benchmark)s "
        max_invocation_time: 600
        invocations: 3
        benchmarks:
            - TreeSort:
                extra_args: "1 0 10"
                codespeed_name: "1st.TreeSort"
            - BubbleSort:
                extra_args: "1 0 25"
                codespeed_name: "1st.BubbleSort"
            - QuickSort:
                extra_args: "1 0 20"
                codespeed_name: "1st.QuickSort"

    sort-steady:
        gauge_adapter: RebenchLog
        command: *SORT_CMD
        max_invocation_time: 600
        warmup: 10
        benchmarks:
            - BubbleSort:
                extra_args: "60 0 2000"
                codespeed_name: "peak.BubbleSort"
            - QuickSort:
                extra_args: "60 0 800"
                codespeed_name: "peak.QuickSort"
            - TreeSort:
                extra_args: "60 0 300"
                codespeed_name: "peak.TreeSort"

    micro-startup:
        gauge_adapter: RebenchLog
        command: &MICRO_CMD " core-lib/Benchmarks/Harness.ns LanguageFeatures.%(benchmark)s "
        max_invocation_time: 30
        invocations: 3
        benchmarks:
            - Fibonacci:
                extra_args: "1 0 100"
                codespeed_name: "1st.Fibonacci"
            - ClosureDefFibonacci:
                extra_args: "1 0 50"
                codespeed_name: "1st.ClosureDefFibonacci"
            - ClosureFibonacci:
                extra_args: "1 0 50"
                codespeed_name: "1st.ClosureFibonacci"
            - Dispatch:
                extra_args: "1 0 50"
                codespeed_name: "1st.Dispatch"
            - Loop:
                extra_args: "1 0 100"
                codespeed_name: "1st.Loop"
            - Recurse:
                extra_args: "1 0 50"
                codespeed_name: "1st.Recurse"
            - Sum:
                extra_args: "1 0 100"
                codespeed_name: "1st.Sum"
            - IntegerLoop:
                extra_args: "1 0 100"
                codespeed_name: "1st.IntegerLoop"
            - FieldLoop:
                extra_args: "1 0 2"
                codespeed_name: "1st.FieldLoop"
            - WhileLoop:
                extra_args: "1 0 100"
                codespeed_name: "1st.WhileLoop"

    micro-steady:
        gauge_adapter: RebenchLog
        command: *MICRO_CMD
        max_invocation_time: 600
        warmup: 5
        benchmarks:
            - Fibonacci:
                extra_args: "70 0 1000"
                codespeed_name: "peak.Fibonacci"
                warmup: 20
            - ClosureDefFibonacci:
                extra_args: "70 0 300"
                codespeed_name: "peak.ClosureDefFibonacci"
                warmup: 20
            - ClosureFibonacci:
                extra_args: "70 0 300"
                codespeed_name: "peak.ClosureFibonacci"
                warmup: 20
            - Dispatch:
                extra_args: "55 0 2000"
                codespeed_name: "peak.Dispatch"
            - Loop:
                extra_args: "55 0 3000"
                codespeed_name: "peak.Loop"
            - Recurse:
                extra_args: "70 0 2000"
                codespeed_name: "peak.Recurse"
                warmup: 20
            - Sum:
                extra_args: "55 0 3000"
                codespeed_name: "peak.Sum"
            - IntegerLoop:
                extra_args: "55 0 2000"
                codespeed_name: "peak.IntegerLoop"
            - FieldLoop:
                extra_args: "55 0 200"
                codespeed_name: "peak.FieldLoop"
            - WhileLoop:
                extra_args: "55 0 2000"
                codespeed_name: "peak.WhileLoop"

    savina-interp:
        gauge_adapter: RebenchLog
        command: "core-lib/Benchmarks/AsyncHarness.ns Savina.%(benchmark)s 50 0 "
        max_invocation_time: 180
        invocations: 3
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "M.PingPong"
            - Counting:
                extra_args: 300000  # was 1000000
                codespeed_name: "M.Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "M.ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 20000
                codespeed_name: "M.ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:50000"
                codespeed_name: "M.ThreadRing"
            - Chameneos:
                extra_args: "100:20000"  # "100:200000"
                codespeed_name: "M.Chameneos"
            - BigContention:
                extra_args: "500:120"
                codespeed_name: "M.BigContention"

            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:600:20" # "20:10000:50"
                codespeed_name: "C.Dictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:500:10:1" # "20:8000:10:1"
                codespeed_name: "C.SortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:5:5:10" # "50:40:40:1000"
                codespeed_name: "C.ProdConBoundedBuffer"
            - Philosophers:
                extra_args: "20:2000"
                codespeed_name: "C.Philosophers"
            - SleepingBarber:
                extra_args: "800:500:500:200"
                codespeed_name: "C.SleepingBarber"
            - CigaretteSmokers:
                extra_args: "1000:200"
                codespeed_name: "C.CigaretteSmokers"
            - LogisticsMapSeries:
                extra_args: "10000:10:346"
                codespeed_name: "C.LogisticsMapSeries"
            - BankTransaction:
                extra_args: "1000:10000"
                codespeed_name: "C.BankTransaction"

            # Parallelism
            - RadixSort:
                extra_args: "10000:65536:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "P.RadixSort"
            - UnbalancedCobwebbedTree:
                extra_args: "10000:10:0:1"
                codespeed_name: "P.UnbalancedCobwebbedTree"
            - TrapezoidalApproximation:
                extra_args: "100:100000:1:5" # "100:10000000:1:5"
                codespeed_name: "P.TrapezoidalApproximation"
            - AStarSearch:
                extra_args: "100:10"
                codespeed_name: "P.AStarSearch"
            - NQueens:
                extra_args: "20:8:4"
                codespeed_name: "P.NQueens"

    savina-jit:
        gauge_adapter: RebenchLog
        command: "core-lib/Benchmarks/AsyncHarness.ns Savina.%(benchmark)s 125 0 "
        max_invocation_time: 420
        warmup: 25
        benchmarks:
            # Microbenchmarks
            - PingPong:
                extra_args: 40000
                codespeed_name: "M.PingPong"
            - Counting:
                extra_args: 200000  # was 1000000
                codespeed_name: "M.Counting"
            - ForkJoinThroughput:
                extra_args: "3000:60" # "10000:60"
                codespeed_name: "M.ForkJoinThroughput"
            - ForkJoinActorCreation:
                extra_args: 40000
                codespeed_name: "M.ForkJoinActorCreation"
            - ThreadRing:
                extra_args: "100:100000"
                codespeed_name: "M.ThreadRing"
            - Chameneos:
                extra_args: "100:100000"  # "100:200000"
                codespeed_name: "M.Chameneos"
            - BigContention:
                extra_args: "2000:120"
                codespeed_name: "M.BigContention"

            # Concurrency
            - ConcurrentDictionary:
                extra_args: "20:1000:20" # "20:10000:50"
                codespeed_name: "C.Dictionary"
            - ConcurrentSortedLinkedList:
                extra_args: "10:1500:10:1" # "20:8000:10:1"
                codespeed_name: "C.SortedLinkedList"
            - ProducerConsumerBoundedBuffer:
                extra_args: "40:10:10:60" # "50:40:40:1000"
                codespeed_name: "C.ProdConBoundedBuffer"
            - Philosophers:
                extra_args: "20:5000"
                codespeed_name: "C.Philosophers"
            - SleepingBarber:
                extra_args: "2500:1000:1000:1000"
                codespeed_name: "C.SleepingBarber"
            - CigaretteSmokers:
                extra_args: "10000:200"
                codespeed_name: "C.CigaretteSmokers"
            - LogisticsMapSeries:
                extra_args: "25000:10:346"
                codespeed_name: "C.LogisticsMapSeries"
            - BankTransaction:
                extra_args: "1000:100000"
                codespeed_name: "C.BankTransaction"

            # Parallelism
            - RadixSort:
                extra_args: "50000:65536:74755"  # "100000:1152921504606846976:74755"
                codespeed_name: "P.RadixSort"
            - UnbalancedCobwebbedTree:
                extra_args: "100000:10:500:100"
                codespeed_name: "P.UnbalancedCobwebbedTree"
            - TrapezoidalApproximation:
                extra_args: "100:1000000:1:5" # "100:10000000:1:5"
                codespeed_name: "P.TrapezoidalApproximation"
            - AStarSearch:
                extra_args: "100:20"
                codespeed_name: "P.AStarSearch"
            - NQueens:
                extra_args: "20:10:4"
                codespeed_name: "P.NQueens"

    validation:
        gauge_adapter: ValidationLog
        command: " core-lib/Benchmarks/ImpactHarness.ns Validation.%(benchmark)s "
        max_invocation_time: 300
        warmup: 30
        benchmarks:
            - Philosophers:
                extra_args: "130 0 5:5 25"
                codespeed_name: "i.Philosophers"
            - Sequence:
                extra_args: "130 0 100"
                codespeed_name: "i.Sequence"
            - DeadLock:
                extra_args: "130 0 4:2:3"
                codespeed_name: "i.DeadLock"
            - Counting:
                extra_args: "130 0 1000"
                codespeed_name: "i.Counting"
            - Messages:
                extra_args: "130 0 1000"
                codespeed_name: "i.Messages"

    fj-steady:
        description: Sequential version of Fork/Join benchmarks for normal performance tracking
        gauge_adapter: RebenchLog
        command: &FJ_CMD " core-lib/Benchmarks/Harness.ns core-lib/Benchmarks/ForkJoin/%(benchmark)s%(input)s.ns "
        input_sizes:
          - Seq # all fork() are compute()
        max_invocation_time: 120
        warmup: 30
        benchmarks:
            ## Excluding Fib, NQueens, QuickSort
            ## we have similar versions already
            - CilkSort:
                extra_args: "130 0 20"
                codespeed_name: "peak.CilkSort"
            - Integrate:
                extra_args: "130 0 100"
                codespeed_name: "peak.Integrate"
            - Jacobi:
                extra_args: "130 0 200"
                codespeed_name: "peak.Jacobi"
            - LUDecomposition:
                extra_args: "130 0 128"
                codespeed_name: "peak.LUDecomposition"

    fj-startup:
        description: Sequential version of Fork/Join benchmarks for normal performance tracking
        gauge_adapter: RebenchLog
        command: *FJ_CMD
        invocations: 3
        input_sizes:
          - Seq # all fork() are compute()
        max_invocation_time: 60
        benchmarks:
            ## Excluding Fib, NQueens, QuickSort
            ## we have similar versions already
            - CilkSort:
                extra_args: "1 0 1"
                codespeed_name: "1st.CilkSort"
            - Integrate:
                extra_args: "1 0 50"
                codespeed_name: "1st.Integrate"
            - Jacobi:
                extra_args: "1 0 100"
                codespeed_name: "1st.Jacobi"
            - LUDecomposition:
                extra_args: "1 0 128"
                codespeed_name: "1st.LUDecomposition"

    forkjoin:
        gauge_adapter: RebenchLog
        command: " core-lib/Benchmarks/Harness.ns core-lib/Benchmarks/ForkJoin/%(benchmark)s%(input)s.ns %(variable)s 0 "
        variable_values:
          - 300 ## the number iterations measured
        max_invocation_time: 300
        input_sizes:
          - Seq # all fork() are compute()
          - Opt # fork, but do one task locally
          - Nai # fork all tasks, only do a join locally
          - One # only one parallel task by forking and immediately joining
        benchmarks:
          - CilkSort:
              extra_args: 20
          # - FFT:
          #     extra_args: 1024
          - Fib:
              extra_args: 23
          - Integrate:
              extra_args: 60
          - Jacobi:
              extra_args: 1024
          - LUDecomposition:
              extra_args: 1024
          - NQueens:
              extra_args: 11
          - QuickSort:
              extra_args: 200
          # - UTS:
          #     extra_args: 1

    savina-csp:
        description: CSP port of the savina benchmarks
        gauge_adapter: RebenchLog
        command: &CSP_CMD " core-lib/Benchmarks/Harness.ns SavinaCSP.%(benchmark)s 125 0"
        max_invocation_time: 500
        warmup: 30
        benchmarks:
            - PingPong:
                #numMessages numThreads, numThreads is unused
                extra_args: "4000 2"
                codespeed_name: "CSP.PingPong"
            - ForkJoinThroughput:
                #numMessages numThreads
                extra_args: "4000 4"
                codespeed_name: "CSP.ForkJoinThroughput"
            - Philosophers:
                #numrounds numThreads, uses numThreads - 1 Philosophers
                extra_args: "500 4"
                codespeed_name: "CSP.Philosophers"

    savina-csp-interp:
        description: CSP port of the savina benchmarks
        gauge_adapter: RebenchLog
        command: &CSP_INTERP_CMD " core-lib/Benchmarks/Harness.ns SavinaCSP.%(benchmark)s 50 0"
        max_invocation_time: 500
        warmup: 30
        benchmarks:
            - PingPong:
                #numMessages numThreads, numThreads is unused
                extra_args: "4000 2"
                codespeed_name: "CSP.PingPong"
            - ForkJoinThroughput:
                #numMessages numThreads
                extra_args: "4000 4"
                codespeed_name: "CSP.ForkJoinThroughput"
            - Philosophers:
                #numrounds numThreads, uses numThreads - 1 Philosophers
                extra_args: "500 4"
                codespeed_name: "CSP.Philosophers"

    mutex:
        description: various mutex based benchmarks
        gauge_adapter: RebenchLog
        command: &CSP_INTERP_CMD " core-lib/Benchmarks/Harness.ns MutexSuite.%(benchmark)s 50 0"
        max_invocation_time: 500
        warmup: 30
        benchmarks:
            - ProducerConsumer:
                #buffersize numThreads, split threads equally into producers and consumers
                extra_args: "4000 4"
                codespeed_name: "Mutex.ProducerConsumer"
            - Philosophers:
                #numrounds numThreads, uses numThreads - 1 Philosophers
                extra_args: "500 4"
                codespeed_name: "Mutex.Philosophers"

# VMs have a name and are specified by a path and the binary to be executed
executors:
    SOMns-interp:
        path: .
        executable: som
        args: "-G -t1 "
    SOMns-graal:
        path: .
        executable: som
        args: "-t1 "
    # without restricting the number of actor threads
    SOMns-interp-tn:
        path: .
        executable: som
        args: "-G "
    # without restricting the number of actor threads
    SOMns-graal-tn:
        path: .
        executable: som
    SOMns-interp-exp:
        path: .
        executable: som
        args: "-G -t1 "
    SOMns-graal-exp:
        path: .
        executable: som
        args: "-t1 "
    SOMns-graal-tn-exp:
        path: .
        executable: som
    SOMns-interp-tn-exp:
        path: .
        executable: som
        args: "-G "

    # with actor tracing
    SOMns-interp-at:
        path: .
        executable: som
        args: "-G -at -TF "

    SOMns-interp-at-mt:
        path: .
        executable: som
        args: "-G -at -TF -atcfg=mp:pc "

    SOMns-interp-at-mp:
        path: .
        executable: som
        args: "-G -at -TF -atcfg=mt:pc "

    SOMns-interp-at-pc:
        path: .
        executable: som
        args: "-G -at -TF -atcfg=mt:mp "

    SOMns-interp-at-min:
        path: .
        executable: som
        args: "-G -at -TF -atcfg=mt:mp:pc "

    # with actor tracing
    SOMns-graal-at:
        path: .
        executable: som
        args: "-at -TF "

    SOMns-graal-at-mt:
        path: .
        executable: som
        args: "-at -TF -atcfg=mp:pc "

    SOMns-graal-at-mp:
        path: .
        executable: som
        args: "-at -TF -atcfg=mt:pc "

    SOMns-graal-at-pc:
        path: .
        executable: som
        args: "-at -TF -atcfg=mt:mp "

    SOMns-graal-at-min:
        path: .
        executable: som
        args: "-at -TF -atcfg=mt:mp:pc "

# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOMns:
        description: All benchmarks on SOMns with Graal
        suites:
            - micro-startup
            - micro-steady
            - macro-startup
            - macro-steady
            - sort-startup
            - sort-steady
            - som-startup
            - som-steady
            - fj-startup
            - fj-steady
        executions:
            - SOMns-graal
    SOMns-Savina:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-interp:
                suites:
                  - savina-interp
            - SOMns-graal:
                suites:
                  - savina-jit

    SOMns-SavinaCSP:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-interp-tn:
                suites:
                  - savina-csp-interp
            - SOMns-graal-tn:
                suites:
                  - savina-csp

    SOMns-Mutex:
        description: Run mutex benchmarks
        executions:
            - SOMns-interp-tn:
                suites:
                  - mutex
            - SOMns-graal-tn:
                suites:
                  - mutex

    SOMns-exp:
        description: All benchmarks on SOMns with Graal
        suites:
            - micro-startup
            - micro-steady
            - macro-startup
            - macro-steady
            - sort-startup
            - sort-steady
            - som-startup
            - som-steady
            - fj-startup
            - fj-steady
        executions:
            - SOMns-graal-exp
    SOMns-interp:
        description: All benchmarks on SOMns without Graal
        suites:
            - micro-startup
            - macro-startup
            - sort-startup
            - som-startup
        executions:
            - SOMns-interp
    SOMns-interp-exp:
        description: All benchmarks on SOMns without Graal
        suites:
            - micro-startup
            - macro-startup
            - sort-startup
            - som-startup
        executions:
            - SOMns-interp
    SOMns-Savina-exp:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-interp-exp:
                suites:
                  - savina-interp
            - SOMns-graal-exp:
                suites:
                  - savina-jit

    SOMns-SavinaCSP-exp:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-interp-tn-exp:
                suites:
                  - savina-csp-interp
            - SOMns-graal-tn-exp:
                suites:
                  - savina-csp

    SOMns-Mutex-exp:
        description: Run mutex benchmarks
        executions:
            - SOMns-interp-tn:
                suites:
                  - mutex
            - SOMns-graal-tn:
                suites:
                  - mutex

    SOMns-Savina-tracing:
        description: Run the Savina Actor benchmarks with tracing enabled
        executions:
            - SOMns-interp-at:
                suites:
                  - savina-interp
            - SOMns-graal-at:
                suites:
                  - savina-jit

    SOMns-Validation:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-graal-tn:
                suites:
                  - validation
            - SOMns-interp-tn:
                suites:
                  - validation
            - SOMns-interp-at:
                suites:
                  - validation
            - SOMns-graal-at:
                suites:
                  - validation

    SOMns-Test:
        description: Run the Savina Actor benchmarks
        executions:
            - SOMns-graal-tn:
                suites:
                  - validation
                  - savina-jit
            - SOMns-interp-tn:
                suites:
                  - validation
                  - savina-interp
            - SOMns-interp-at:
                suites:
                  - validation
                  - savina-interp
            - SOMns-interp-at-mt:
                suites:
                  - validation
                  - savina-interp
            - SOMns-interp-at-mp:
                suites:
                  - validation
                  - savina-interp
            - SOMns-interp-at-pc:
                suites:
                  - validation
                  - savina-interp
            - SOMns-interp-at-min:
                suites:
                  - validation
                  - savina-interp
            - SOMns-graal-at:
                suites:
                  - validation
                  - savina-jit
            - SOMns-graal-at-mt:
                suites:
                  - validation
                  - savina-jit
            - SOMns-graal-at-mp:
                suites:
                  - validation
                  - savina-jit
            - SOMns-graal-at-pc:
                suites:
                  - validation
                  - savina-jit
            - SOMns-graal-at-min:
                suites:
                  - validation
                  - savina-jit

    nightly:
        description: Nightly runs of the experiments
        executions:
            # without restricting the number of actor threads
            - SOMns-graal-tn:
                suites:
                  - micro-startup
                  - micro-steady
                  - macro-startup
                  - macro-steady
                  - sort-startup
                  - sort-steady
                  - som-startup
                  - som-steady
                  - savina-jit
            # without restricting the number of actor threads
            - SOMns-interp-tn:
                suites:
                  - micro-startup
                  - macro-startup
                  - sort-startup
                  - som-startup
                  - savina-interp

    forkjoin:
        description: Fork/Join benchmarks
        executions:
          - SOMns-graal-tn:
              suites:
                - forkjoin
