<project name="som" basedir="." default="compile-all"
    xmlns:unless="ant:unless"
    xmlns:if="ant:if"
    xmlns:jacoco="antlib:org.jacoco.ant">

    <property name="src.dir"     value="src"/>
    <property name="src_gen.dir" value="src_gen"/>
    <property name="lib.dir"     location="libs" />
    <property name="bd.dir"      location="${lib.dir}/black-diamonds/" />
    <property name="unit.dir"    value="tests/java" />
    <property name="kompos.dir"  value="tools/kompos" />
    <property name="corelib.dir" location="core-lib" />
    <property name="graal.dir"   location="${lib.dir}/truffle/compiler" />
    <property name="truffle.dir" location="${lib.dir}/truffle/truffle" />
    <property name="sdk.dir"     location="${lib.dir}/truffle/sdk" />
    <property name="tools.dir"   location="${lib.dir}/truffle/tools" />
    <property name="svm.dir"     location="${lib.dir}/truffle/substratevm" />
    <property name="compiler.build" location="${graal.dir}/mxbuild/dists" />
    <property name="sdk.build"   location="${sdk.dir}/mxbuild/dists" />
    <property name="tools.build" location="${tools.dir}/mxbuild/dists" />
    <property name="svm.build"   location="${svm.dir}/mxbuild/dists" />
    <property name="truffle.build" location="${truffle.dir}/mxbuild/dists" />
    <property name="somns-deps.version" value="0.3.6" />
    <property name="checkstyle.version" value="8.11" />
    <property name="jacoco.version"     value="0.8.0" />

    <!-- <property name="lib.url" value="https://dl.bintray.com/smarr/SOM" /> -->
    <property name="lib.url" value="http://stefan-marr.de/dev" />

    <property name="mx.cmd" value="../../mx/mx" />

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>

    <property environment="env"/>

    <path id="boot.cp">
        <pathelement location="${sdk.build}/graal-sdk.jar" />
        <pathelement location="${truffle.build}/truffle-api.jar" />
    </path>
    
    <path id="svm.cp">
        <pathelement location="${svm.build}/objectfile.jar" />
        <pathelement location="${svm.build}/pointsto.jar" />
        <pathelement location="${svm.build}/svm.jar" />
        <pathelement location="${compiler.build}/graal-management.jar" />
        <pathelement location="${compiler.build}/graal.jar" />
        
        <pathelement location="${env.JVMCI_HOME}/jre/lib/jvmci/jvmci-api.jar" />
        <pathelement location="${env.JVMCI_HOME}/jre/lib/jvmci/jvmci-hotspot.jar" />
    </path>

    <path id="common.cp">
        <pathelement location="${classes.dir}" />
        <pathelement location="${bd.dir}/build/classes" />
        <pathelement location="${lib.dir}/somns-deps.jar" />
        
        <pathelement location="${svm.build}/svm-core.jar" />
        <pathelement location="${tools.build}/truffle-profiler.jar" />
    </path>
    
    <path id="som.cp">
        <path refid="boot.cp"/>
        <path refid="common.cp"/>
        <pathelement location="${unit.dir}" />

        <pathelement location="${sdk.build}/word-api.jar" />
        <pathelement location="${sdk.build}/polyglot-tck.jar" />
        <pathelement location="${lib.dir}/somns-deps-dev.jar" />
        

        <pathelement location="${truffle.build}/truffle-debug.jar" />
        <pathelement location="${truffle.build}/truffle-dsl-processor.jar" />
        <pathelement location="${truffle.build}/truffle-tck.jar" />
    </path>
    
    <path id="image.cp">
        <path refid="boot.cp"/>
        <path refid="svm.cp"/>
        <path refid="common.cp"/>
        <pathelement location="${svm.build}/library-support.jar" />
    </path>

    <macrodef name="travis">
        <attribute name="target" />
        <attribute name="start" default="" />
        <sequential>
            <echo message="travis_fold:start:@{target}${line.separator}@{start}${line.separator}" unless:blank="@{start}" if:true="${env.TRAVIS}" />
            <echo message="travis_fold:end:@{target}${line.separator}"             if:blank="@{start}" if:true="${env.TRAVIS}" />
        </sequential>
    </macrodef>

    <condition property="is.atLeastJava9" value="true" else="false">
      <or>
        <matches string="${java.version}" pattern="^9"/>
        <matches string="${java.version}" pattern="^1[0-9]"/>
      </or>
    </condition>
    <condition property="kernel" value="darwin-amd64" else="linux-amd64">
        <os family="mac"/>
    </condition>
    
    <travis target="env" start="Environment" />
    <echo>
        ant.java.version: ${ant.java.version}
        java.version:     ${java.version}
        is.atLeastJava9:  ${is.atLeastJava9}
        kernel:           ${kernel}
        env.TRAVIS:       ${env.TRAVIS}
    </echo>
    <travis target="env" />

    <target name="clean" description="Remove build directories and generated code">
        <travis target="clean" start="clean" />

        <delete dir="${build.dir}"/>
        <delete dir="${src_gen.dir}"/>
        <ant dir="${corelib.dir}/TestSuite/extension" useNativeBasedir="true" target="clean" inheritAll="false" />

        <travis target="clean" />        
    </target>

    <target name="clean-truffle" depends="check-truffle-available" if="truffle.present">
        <travis target="clean-truffle" start="clean-truffle" />
        
        <exec executable="${mx.cmd}" dir="${svm.dir}">
          <arg value="--dynamicimports"/>
          <arg value="../truffle,../tools,../compiler,../sdk"/>
          <arg value="clean"/>
        </exec>

        <travis target="clean-truffle" />
    </target>

    <target name="clobber" description="Do clean, and also clean truffle build" depends="clean,clean-truffle">
        <travis target="clobber" start="clobber" />
        
        <delete dir="${kompos.dir}/out"/>
        <delete dir="${kompos.dir}/node_modules"/>
        <ant dir="${bd.dir}" useNativeBasedir="true" target="clean" inheritAll="false"/>
        
        <travis target="clobber" />
    </target>

    <target name="check-truffle-available">
        <available file="${truffle.dir}" property="truffle.present"/>
    </target>
    <target name="truffle-submodule" depends="check-truffle-available"
            unless="truffle.present">
      <exec executable="./.gitloadmodules" failonerror="true">
      </exec>
    </target>

    <target name="truffle-libs" unless="skip.truffle" depends="truffle-submodule">
        <travis target="truffle-libs" start="Build Truffle" />
        <exec executable="${mx.cmd}" dir="${svm.dir}" failonerror="true">
            <arg value="--dynamicimports"/>
            <arg value="../truffle,../tools,../compiler,../sdk"/>
            <arg value="build"/>
            <arg value="--no-native" unless:true="${build.native}" />
            <env key="JAVA_HOME" value="${env.JVMCI_HOME}" />
        </exec>
        <travis target="truffle-libs" />
    </target>

    <target name="bd-libs"> <!-- implicit dependency on truffle-libs -->
        <travis target="bd-libs" start="Build Black Diamonds" />
        <ant dir="${bd.dir}" useNativeBasedir="true" target="libs-junit" inheritAll="false">
            <property name="force.java8"   value="${is.atLeastJava9}" />
        </ant>
        <ant dir="${bd.dir}" useNativeBasedir="true" target="compile-nodeps" inheritAll="false">
            <property name="sdk.build"   value="${sdk.build}" />
            <property name="truffle.dir" value="${truffle.dir}" />
            <property name="truffle.build" value="${truffle.build}" />
            <property name="force.java8"   value="${is.atLeastJava9}" />
        </ant>
        <travis target="bd-libs" />
    </target>

    <target name="ideinit" depends="source">
        <exec executable="${mx.cmd}" dir="${svm.dir}" failonerror="true">
            <arg value="--dynamicimports"/>
            <arg value="../truffle,../tools,../compiler,../sdk"/>
            <arg value="eclipseinit"/>
        </exec>
    </target>

    <target name="libs" depends="truffle-libs,bd-libs" unless="skip.libs">
        <travis target="libs" start="Get Libs" />
        <get src="${lib.url}/somns-deps-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps.jar" />
        <get src="${lib.url}/somns-deps-dev-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps-dev.jar" />
        <travis target="libs" />
    </target>

    <target name="source" description="Download Source Jars for development">
        <get src="${lib.url}/somns-deps-source-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps-source.jar" />
    </target>

    <target name="eclipseformat">
        <travis target="eclipseformat" start="Format code with Eclipse" />
        <pathconvert pathsep=" " property="javafiles">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${unit.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${corelib.dir}">
                <include name="**/*.java"/>
            </fileset>
        </pathconvert>
        <exec executable="${env.ECLIPSE_EXE}" dir="${basedir}">
            <arg value="-nosplash"/>
            <arg value="-application"/>
            <arg value="-consolelog"/>
            <arg value="-data"/>
            <arg value="${basedir}"/>
            <arg value="-vm"/>
            <arg value="${env.JAVA_HOME}/bin/java"/>
            <arg value="org.eclipse.jdt.core.JavaCodeFormatter"/>
            <arg value="-config"/>
            <arg value="${basedir}/.settings/org.eclipse.jdt.core.prefs"/>
            <arg line="${javafiles}"/>
        </exec>
        <travis target="eclipseformat" />
    </target>

    <target name="eclipseformat-check" depends="eclipseformat">
        <travis target="eclipseformat-check" start="Check Eclipse Format" />
        <exec executable="git" dir="${basedir}">
            <arg value="status" />
            <arg value="*.java" />
        </exec>
        <exec executable="git" dir="${basedir}" failonerror="true">
            <arg value="diff-index" />
            <arg value="--quiet" />
            <arg value="--exit-code" />
            <arg value="--ignore-submodules" />
            <arg value="HEAD" />
        </exec>
        <travis target="eclipseformat-check" />
    </target>

    <target name="checkstyle-jar">
        <travis target="checkstyle-jar" start="Get Checkstyle Jar" />
        <get src="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar"
            usetimestamp="true"
            dest="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
        <travis target="checkstyle-jar" />
    </target>

    <target name="checkstyle" depends="checkstyle-jar" description="Check Code with Checkstyle">
        <travis target="checkstyle" start="Run Checkstyle" />
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
        <checkstyle config=".checkstyle_checks.xml">
          <fileset dir="${src.dir}" includes="**/*.java"/>
          <fileset dir="${unit.dir}" includes="**/*.java"/>
          <fileset dir="${corelib.dir}" includes="**/*.java"/>
          <formatter type="plain"/>
        </checkstyle>
        <travis target="checkstyle" />
    </target>

    <target name="jacoco-lib" description="Get JaCoCo dependency">
        <travis target="jacoco-lib" start="Get JaCoCo" />
        <get src="http://search.maven.org/remotecontent?filepath=org/jacoco/jacoco/${jacoco.version}/jacoco-${jacoco.version}.zip"
            usetimestamp="true"
            dest="${lib.dir}/jacoco-${jacoco.version}.zip" />
        <unzip src="${lib.dir}/jacoco-${jacoco.version}.zip" dest="${lib.dir}/jacoco"/>
        <taskdef uri="antlib:org.jacoco.ant"
            resource="org/jacoco/ant/antlib.xml"
            classpath="${lib.dir}/jacoco/lib/jacocoant.jar" />
        <travis target="jacoco-lib" />
    </target>

    <target name="codacy-coverage-lib" description="Report Coverage to Codacy">
        <travis target="codacy-lib" start="Get Codacy Lib" />
        <get src="https://oss.sonatype.org/service/local/repositories/releases/content/com/codacy/codacy-coverage-reporter/2.0.2/codacy-coverage-reporter-2.0.2-assembly.jar"
            usetimestamp="true"
            dest="${lib.dir}/codacy-coverage-reporter.jar" />
        <travis target="codacy-lib" />
    </target>

    <target name="java8-on-java9" description="Support Java 9 or later" if="${is.atLeastJava9}">
      <travis target="java89" start="Support Java 9" />
      <mkdir dir="${classes.dir}" />
      <javac includeantruntime="false" srcdir="${lib.dir}/java8" destdir="${classes.dir}" debug="true">
        <compilerarg line="--release 8" />
      </javac>
      <travis target="java89" />
    </target>

    <target name="compile-som" description="Compile SOMns" depends="java8-on-java9">
        <travis target="compile-som" start="Compilse SOMns" />
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${src_gen.dir}" />
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" debug="true"> <!-- for debugging: fork="true"  -->
          <!-- for debugging: <compilerarg line="-J-Xdebug -J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000" /> -->
          <classpath refid="som.cp" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-XDignore.symbol.file" />
          <compilerarg line="-Xlint:all" />
          <compilerarg line="--release 8" if:true="${is.atLeastJava9}" />
        </javac>
        <javac includeantruntime="false" srcdir="${src_gen.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="som.cp" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-Xlint:all" />
          <compilerarg line="--release 8" if:true="${is.atLeastJava9}" />
        </javac>
        <javac includeantruntime="false" srcdir="${unit.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="som.cp" />
          <compilerarg line="--release 8" if:true="${is.atLeastJava9}" />
        </javac>
        <travis target="compile-som" />
    </target>

    <target name="compile" depends="libs,compile-som,compile-test-extension" description="Compile SOMns and dependencies">
    </target>

    <target name="compile-test-extension">
      <travis target="compile-test-extension" start="Compile an Extension for Testing" />
      <ant dir="${corelib.dir}/TestSuite/extension" useNativeBasedir="true" target="jar" inheritAll="false" />
      <travis target="compile-test-extension" />
    </target>

    <target name="kompos" description="Build Kompos">
        <travis target="kompos" start="Build Kompos" />
        <exec executable="npm" dir="${kompos.dir}" failonerror="true">
            <arg value="--quiet"/>
            <arg value="install"/>
        </exec>
        <travis target="kompos" />
    </target>

    <target name="compile-all" depends="compile,kompos" description="Build SOMns and Kompos">
    </target>

    <target name="jar" depends="compile" description="Package as JAR">
        <jar destfile="${build.dir}/som.jar" basedir="${classes.dir}"></jar>
    </target>

    <target name="unit-tests" depends="compile,jacoco-lib" description="Execute tests">
      <travis target="unit-tests" start="Execute Tests" />
      <jacoco:coverage>
        <junit haltonerror="false" haltonfailure="false" failureproperty="test.failed"
            outputtoformatters="true" fork="true" forkmode="once">
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <classpath refid="som.cp" />
            <batchtest fork="yes" filtertrace="false">
              <fileset dir="${unit.dir}">
                  <include name="**/*Test*.java"/>
                  <include name="**/*TCK.java"/>
              </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
     </jacoco:coverage>

     <jacoco:coverage>
        <java classname="som.Launcher" fork="true" failonerror="true">
            <classpath refid="som.cp" />
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <arg line="${corelib.dir}/TestSuite/TestRunner.ns" />
        </java>
     </jacoco:coverage>

     <fail message="Basic tests failed." if="test.failed" />
     <travis target="unit-tests" />
    </target>

    <target name="som-tests" depends="compile">
      <travis target="som-tests" start="Run SOMns Tests" />
      <!-- delete old coverage data, this should be the first task generating coverage data -->
      <delete file="all.gcov" />

      <exec executable="./som" failonerror="true">
        <arg value="--coverage" />
        <arg value="all.gcov" />
        <arg value="--java-coverage" />
        <arg value="jacoco.exec" />
        <arg value="-G" />
        <arg value="${corelib.dir}/TestSuite/TestRunner.ns" />
      </exec>

      <exec executable="./som" failonerror="true">
        <arg value="-X" />
        <arg value="${corelib.dir}/TestSuite/TestRunner.ns" />
      </exec>
      <travis target="som-tests" />
    </target>

    <target name="serialization-tests" depends="compile">
      <travis target="serialization-tests" start="Test Snapshot Serialization" />
      <exec executable="./som" failonerror="true">
        <arg value="-G" />
        <arg value="-at" />
        <arg value="-tas" />
        <arg value="${corelib.dir}/TestSuite/TestRunner.ns" />
        <arg value="${corelib.dir}/TestSuite/Serialization.ns" />
        <arg value="SerializationTest" />
      </exec>
      <travis target="serialization-tests" />
    </target>

    <target name="dynamic-metrics-tests" depends="compile-som">
      <travis target="dym-tests" start="Test Dynamic Metric Tool" />
      <exec executable="tests/dym/test.sh" failonerror="true">
          <arg value="--coverage" />
      </exec>
      <travis target="dym-tests" />
    </target>

    <target name="superinstructions-tests" depends="compile-som">
      <travis target="si-tests" start="Test Superinstruction Tool" />
      <exec executable="tests/superinstructions/test.sh" failonerror="true"></exec>
      <travis target="si-tests" />
    </target>
    
    <target name="update-test-data" depends="compile-som" description="Updates the test data for DynamicMetrics and SuperInstructions">
      <exec executable="tests/dym/test.sh" failonerror="true">
        <arg value="update" />
      </exec>
      <exec executable="tests/superinstructions/test.sh" failonerror="true">
        <arg value="update" />
      </exec>
    </target>

    <target name="replay-tests" depends="compile">
      <travis target="replay-tests" start="Test Trace Replay" />
      <exec executable="tests/replay/test.sh" failonerror="true">
          <arg value="1" />
      </exec>
      <exec executable="tests/replay/test.sh" failonerror="true">
          <arg value="2" />
      </exec>
      <travis target="replay-tests" />
    </target>

    <target name="snapshot-replay-tests" depends="">
      <exec executable="tests/snapshot-replay/test.sh" failonerror="true">
          <arg value="1" />
      </exec>
      <exec executable="tests/snapshot-replay/test.sh" failonerror="true">
          <arg value="2" />
      </exec>
    </target>

    <target name="snapshot-tests" depends="compile">
      <travis target="snapshot-tests" start="Tests Snapshotting" />
      <exec executable="tests/snapshot/test.sh" failonerror="true">
      </exec>
      <travis target="snapshot-tests" />
    </target>

    <target name="core-tests" depends="unit-tests,som-tests,dynamic-metrics-tests,superinstructions-tests">
    </target>

    <target name="send-java-coverage" depends="jacoco-lib,codacy-coverage-lib">
      <travis target="send-java-coverage" start="Send Java Coverage" />
      <jacoco:report>
        <executiondata>
          <file file="jacoco.exec"/>
        </executiondata>

        <structure name="SOMns coverage">
          <classfiles>
            <fileset dir="${classes.dir}"/>
            <fileset dir="${bd.dir}/build/classes"/>
          </classfiles>
          <sourcefiles encoding="UTF-8">
            <fileset dir="src"/>
            <fileset dir="${bd.dir}/src"/>
          </sourcefiles>
        </structure>

        <!-- <html destdir="report"/> -->
        <xml destfile="jacoco.xml"/>
      </jacoco:report>

      <java classname="com.codacy.CodacyCoverageReporter">
        <classpath>
          <pathelement location="${lib.dir}/codacy-coverage-reporter.jar" />
        </classpath>
        <arg value="-l" />
        <arg value="Java" />
        <arg value="-r" />
        <arg value="jacoco.xml" />
      </java>
      <travis target="send-java-coverage" />
    </target>

    <target name="send-somns-coverage">
        <travis target="send-somns-coverage" start="Send SOMns Coverage" />
        <!-- submit coverage data -->
        <java classname="coveralls.Report" fork="true" failonerror="true">
            <classpath refid="som.cp" />
            <arg value="${env.COVERALLS_REPO_TOKEN}" />
            <arg value="all.gcov" />
        </java>
        <travis target="send-somns-coverage" />
    </target>

    <target name="coverage" depends="send-java-coverage,send-somns-coverage" />

    <target name="tests" depends="core-tests,serialization-tests,replay-tests,coverage">
    </target>
    
    <target name="native-build" depends="libs,compile-som">
      <travis target="native" start="Build Native Image" />
      <java classname="com.oracle.svm.hosted.NativeImageGeneratorRunner" fork="true" failonerror="true"
          jvm="${env.JVMCI_HOME}/bin/java">
        <classpath refid="svm.cp" />
        <jvmarg line="-Xbootclasspath/a:${ant.refid:boot.cp}" />
        <jvmarg line="-Djvmci.Compiler=graal -Djvmci.class.path.append=${compiler.build}/graal.jar" />

        <jvmarg line="-server -d64 -noverify" />
        <jvmarg line="-Dgraal.EagerSnippets=true" />
        <jvmarg line="-Xss10m -Xms1g -Xmx13743895344" />
        <jvmarg line="-XX:+UnlockExperimentalVMOptions" />
        <jvmarg line="-XX:+EnableJVMCI" />
        <jvmarg line="-XX:-UseJVMCIClassLoader" />
        
        <jvmarg line="-Duser.country=US -Duser.language=en " />
        <jvmarg line="-Dgraalvm.version=dev -Dorg.graalvm.version=dev -Dcom.oracle.graalvm.isaot=true" />
        <jvmarg line="-Dgraalvm.locatorDisabled=true -Dtruffle.TrustAllTruffleRuntimeProviders=true" />
        <!-- <jvmarg line="-Dsom.instrumentation=true -Dsom.truffleDebugger=true" /> -->

        <arg line="-imagecp ${ant.refid:image.cp}" />
        
        <!-- <arg line="-H:+PrintRuntimeCompileMethods" /> -->
        <!-- <arg line="-H:+PrintMethodHistogram" /> -->
        
        <arg line="-H:Path=${basedir}" />
        <arg line="-H:-ThrowUnsafeOffsetErrors" />
        <arg line="-H:+RuntimeAssertions" />
        <arg line="-H:MaxRuntimeCompileMethods=800" />
        <arg line="-H:CLibraryPath=${svm.dir}/clibraries/${kernel}" />
        <arg line="-H:Features=com.oracle.svm.truffle.TruffleFeature" />
        <arg line="-H:Class=som.Launcher -H:Name=som-native" />

      </java>
      <travis target="native" />
    </target>
    
    <target name="native">
      <antcall target="native-build">
        <param name="build.native" value="true"/>
      </antcall>
    </target>
</project>
