<project name="som" basedir="." default="compile-all">

    <property name="src.dir"     value="src"/>
    <property name="src_gen.dir" value="src_gen"/>
    <property name="lib.dir"     value="libs" />
    <property name="unit.dir"    value="tests/java" />
    <property name="kompos.dir"  value="tools/kompos" />
    <property name="truffle.dir" value="${lib.dir}/truffle/truffle" />
    <property name="sdk.build"   value="${lib.dir}/truffle/sdk/mxbuild/dists" />
    <property name="truffle.build" value="${truffle.dir}/mxbuild/dists" />
    <property name="somns-deps.version" value="0.3.3" />
    <property name="checkstyle.version" value="7.6.1" />
    
    <!-- <property name="lib.url" value="https://dl.bintray.com/smarr/SOM" /> -->
    <property name="lib.url" value="http://stefan-marr.de/dev" />
    
    <property name="mx.cmd" value="../../mx/mx" />

    <property name="build.dir"   value="build"/>
    <property name="classes.dir" value="${build.dir}/classes"/>
    
    <property environment="env"/>

    <path id="project.classpath">
        <pathelement location="${classes.dir}" />
        <pathelement location="${unit.dir}" />
        <pathelement location="${sdk.build}/graal-sdk.jar" />
        <pathelement location="${sdk.build}/word-api.jar" />
        <pathelement location="${lib.dir}/somns-deps-dev.jar" />
        <pathelement location="${lib.dir}/somns-deps.jar" />
        <pathelement location="${truffle.build}/truffle-api.jar" />
        <pathelement location="${truffle.build}/truffle-debug.jar" />
        <pathelement location="${truffle.build}/truffle-dsl-processor.jar" />
        <pathelement location="${truffle.build}/truffle-tck.jar" />
    </path>

    <target name="clean" description="Remove build directories and generated code">
        <delete dir="${build.dir}"/>
        <delete dir="${src_gen.dir}"/>
    </target>
    
    <target name="clean-truffle" depends="check-truffle-available" if="truffle.present">
        <exec executable="${mx.cmd}" dir="${truffle.dir}">
            <arg value="clean"/>
        </exec>
    </target>
    
    <target name="clobber" description="Do clean, and also clean truffle build" depends="clean,clean-truffle">
        <delete dir="${kompos.dir}/out"/>
        <delete dir="${kompos.dir}/node_modules"/>
    </target>
    
    <target name="check-truffle-available">
        <available file="${lib.dir}/truffle/.git" property="truffle.present"/>
    </target>
    <target name="truffle" depends="check-truffle-available"
            unless="truffle.present">
      <exec executable="./.gitloadmodules" failonerror="true">
      </exec>
    </target>

    <target name="truffle-libs" unless="skip.libs" depends="truffle">
        <exec executable="${mx.cmd}" dir="${truffle.dir}" failonerror="true">
            <arg value="build"/>
            <arg value="--no-native"/>
        </exec>
    </target>

    <target name="ideinit" depends="source">
        <exec executable="${mx.cmd}" dir="${truffle.dir}" failonerror="true">
            <arg value="eclipseinit"/>
        </exec>
    </target>

    <target name="libs" depends="truffle-libs" unless="skip.libs">
        <get src="${lib.url}/somns-deps-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps.jar" />
        <get src="${lib.url}/somns-deps-dev-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps-dev.jar" />
    </target>

    <target name="source" description="Download Source Jars for development">
        <get src="${lib.url}/somns-deps-source-${somns-deps.version}.jar"
            usetimestamp="true"
            dest="${lib.dir}/somns-deps-source.jar" />
    </target>

    <target name="checkstyle-jar">
        <get src="http://tenet.dl.sourceforge.net/project/checkstyle/checkstyle/${checkstyle.version}/checkstyle-${checkstyle.version}-all.jar"
            usetimestamp="true"
            dest="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
    </target>
    
    <target name="checkstyle" depends="checkstyle-jar" description="Check Code with Checkstyle">
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpath="${lib.dir}/checkstyle-${checkstyle.version}-all.jar" />
        <checkstyle config=".checkstyle_checks.xml">
          <fileset dir="src" includes="**/*.java"/>
          <formatter type="plain"/>
        </checkstyle>
    </target>

    <target name="compile" depends="libs" description="Compile SOMns">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${classes.dir}" />
        <mkdir dir="${src_gen.dir}" />
        <javac includeantruntime="false" srcdir="${src.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-XDignore.symbol.file" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${src_gen.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
          <compilerarg line="-s ${src_gen.dir}" />
          <compilerarg line="-Xlint:all" />
        </javac>
        <javac includeantruntime="false" srcdir="${unit.dir}" destdir="${classes.dir}" debug="true">
          <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="kompos" description="Build Kompos">
        <exec executable="npm" dir="${kompos.dir}" failonerror="true">
            <arg value="--quiet"/>
            <arg value="install"/>
        </exec>
    </target>
    
    <target name="compile-all" depends="compile,kompos" description="Build SOMns and Kompos">
    </target>

    <target name="jar" depends="compile" description="Package as JAR">
        <jar destfile="${build.dir}/som.jar" basedir="${classes.dir}"></jar>
    </target>
    
    <target name="unit-tests" depends="compile" description="Execute tests">
        <junit haltonerror="false" haltonfailure="false" failureproperty="test.failed"
            outputtoformatters="true">
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <classpath refid="project.classpath" />
            <batchtest fork="yes" filtertrace="false">
              <fileset dir="${unit.dir}">
                  <include name="**/*Test*.java"/>
                  <include name="**/*TCK.java"/>
              </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>

        <java classname="som.VM" fork="true" failonerror="true">
            <classpath refid="project.classpath" />
            <jvmarg value="-ea" />
            <jvmarg value="-esa" />
            <arg line="core-lib/TestSuite/TestRunner.som" />
        </java>
        <fail message="Basic tests failed." if="test.failed" />
    </target>

    <target name="som-tests" depends="compile">
      <delete file="all.gcov" /> <!-- delete old coverage data, this should be the first task generating coverage data -->
      <exec executable="./som" failonerror="true">
        <arg value="--coverage" />
        <arg value="all.gcov" />
        <arg value="-G" />
        <arg value="core-lib/TestSuite/TestRunner.som" />
      </exec>
      <exec executable="./som" failonerror="true">
        <arg value="-X" />
        <arg value="core-lib/TestSuite/TestRunner.som" />
      </exec>
    </target>

    <target name="dynamic-metrics-tests" depends="compile">
      <exec executable="tests/dym/test.sh" failonerror="true"></exec>
    </target>

    <target name="replay-tests" depends="compile">
      <exec executable="tests/replay/test.sh" failonerror="true">
          <arg value="1" />
      </exec>
      <exec executable="tests/replay/test.sh" failonerror="true">
          <arg value="2" />
      </exec>
    </target>
    
    <target name="core-tests" depends="unit-tests,som-tests,dynamic-metrics-tests">
    </target>

    <target name="coverage">
        <!-- submit coverage data -->
        <java classname="coveralls.Report" fork="true" failonerror="true">
            <classpath refid="project.classpath" />
            <arg value="${env.COVERALLS_REPO_TOKEN}" />
            <arg value="all.gcov" />
        </java>
    </target>

    <target name="tests" depends="core-tests,replay-tests,coverage">
    </target>
</project>
