#!/usr/bin/env python2.7
import argparse
import sys
import os
import shlex

BASE_DIR    = os.path.dirname(os.path.realpath(__file__))
TRUFFLE_DIR = BASE_DIR + '/libs/truffle'
JAVA_HOME   = os.getenv('JAVA_HOME',  None)
JVMCI_BIN   = os.getenv('JVMCI_BIN',  None)
GRAAL_HOME  = os.getenv('GRAAL_HOME',  None)
GRAAL_FLAGS = os.getenv('GRAAL_FLAGS', None)

##
## Defining Argument Parsing
##
parser = argparse.ArgumentParser(
    description='Helper script to run SOMns with/without Graal')

parser.add_argument('-d', '--debug', help='wait for debugger to attach',
                    dest='debug', action='store_true', default=False)
parser.add_argument('-t', '--num-threads', help='number of threads to be used',
                    dest='threads', default=None)
parser.add_argument('-p', '--platform', help='SOM Platform file, default: core-lib/Platform.ns',
                    dest='som_platform', default=BASE_DIR + '/core-lib/Platform.ns')
parser.add_argument('-k', '--kernel', help='SOM Kernel file, default: core-lib/Kernel.ns',
                    dest='som_kernel', default=BASE_DIR + '/core-lib/Kernel.ns')
parser.add_argument('-dnu', '--stack-trace-on-dnu', help='Print a stack trace on #doesNotUnderstand:',
                    dest='som_dnu', action='store_true', default=False)
parser.add_argument('-vmd', '--vmdebug', help='enables debug mode (additional output)',
                    dest='vmdebug', action='store_true', default=False)

explore = parser.add_argument_group('Explore', 'Investigate Execution')
explore.add_argument('-i', '--igv', help='dump compilation details to IGV',
                    dest='igv', action='store_true', default=False)
explore.add_argument('-if', '--igv-to-file', help='dump compilation details to file to be loaded by IGV',
                    dest='igv_to_file', action='store_true', default=False)
explore.add_argument('-io', '--igv-only', help='only dump named method, use of * allowed. Uses Invokable.toString()',
                    dest='only_igv', default=None)
explore.add_argument('-l', '--low-level', help='enable low-level optimization output',
                    dest='low_level', action='store_true', default=False)
explore.add_argument('-ti', '--trace-invalidation', help='trace assumption invalidation and transfers to interpreter',
                    dest='trace_invalidation', action='store_true', default=False)
explore.add_argument('-w', '--perf-warnings', help='enable performance warnings',
                    dest='perf_warnings', action='store_true', default=False)
explore.add_argument('-f', '--fail-on-missing-optimizations', help='fail execution on missing optimizations',
                    dest='fail_missing_opts', action='store_true', default=False)
explore.add_argument('-v', '--visual-vm', help='connect to VisualVM for profiling',
                    dest='visual_vm', action='store_true', default=False)


profile = parser.add_argument_group('Profile', 'Profile Execution')
profile.add_argument('-gp', '--graal-profile', help='enable Graal-level profiling after warmup',
                    dest='graal_profile', action='store_true', default=False)
profile.add_argument('-ga', '--graal-profile-allocations', help='enable Graal-level profiling after warmup, and profile allocations',
                    dest='graal_profile_allocations', action='store_true', default=False)
profile.add_argument('-gi', '--graal-profile-intervals', help='enable Graal-level profiling after certain time intervals',
                    dest='graal_profile_timed', action='store_true', default=False)
profile.add_argument('-gb', '--graal-branch-profile', help='enable Graal-level branch profiling',
                    dest='graal_branch_profile', action='store_true', default=False)
profile.add_argument('-tp', '--truffle-profile', help='enable Graal-level profiling after warmup',
                    dest='truffle_profile', action='store_true', default=False)


tools = parser.add_argument_group('Tools', 'Additional Tools')
tools.add_argument('-wd', '--web-debugger', help='start Web debugger',
                    dest='web_debugger', action='store_true', default=False)
tools.add_argument('-ad', '--assisted-debugging', help='enable assisted debugging',
                    dest='assisted_debugging', action='store_true', default=False)
tools.add_argument('-adbp', '--assisted-debugging-breakpoints', help='set assisted debugging breakpoints limit',
                    dest='assisted_debugging_breakpoints', default=0)
tools.add_argument('-dm', '--dynamic-metrics', help='Capture Dynamic Metrics',
                    dest='dynamic_metrics', action='store_true', default=False)
tools.add_argument('-si', '--si-candidates', help='Identify candidates for super-instructions',
                    dest='si_candidates', action='store_true', default=False)
tools.add_argument('-at', '--actor-tracing', help='enable tracing of actor operations',
                    dest='actor_tracing', action='store_true', default=False)
tools.add_argument('-art', '--actor-receiver-tracing', help='enable tracing of actor operations on the receiver side',
                    dest='actor_receiver_tracing', action='store_true', default=False)
tools.add_argument('-sid', '--small-ids', help='use small id optimization to reduce trace size',
                    dest='small_ids', action='store_true', default=False)
tools.add_argument('-mt', '--memory-tracing', help='enable tracing of memory usage and GC',
                    dest='memory_tracing', action='store_true', default=False)
tools.add_argument('-tf', '--trace-file', help='Trace file destination, default: traces/trace',
                    dest='trace_file', default=BASE_DIR + '/traces/trace')
tools.add_argument('-TF', '--disable-trace-file', help='trace file wont be written to disk',
                    dest='disable_trace_file', action='store_true', default=False)
tools.add_argument('-r', '--replay', help='execution of the program is guided by an existing trace file',
                    dest='replay', action='store_true', default=False)
tools.add_argument('-BR', '--no-buffer-recycling', help='create singe-use buffers only',
                    dest='buffer_recycling', action='store_true', default=False)
tools.add_argument('-bpt', '--buffers-per-thread', help='used to calculate the number of buffers to use for tracing',
                    dest='buffers_per_thread', default=4)
tools.add_argument('-bs', '--buffer-size', help='set the size of buffer used for tracing',
                    dest='buffer_size', default=1048576)
tools.add_argument('-bd', '--buffer-delay', help='set the delay for checking if there are buffers to write',
                    dest='buffer_delay', default=50)
tools.add_argument('-as', '--actor-snapshots', help='actor tracing/replay with snapshots',
                    dest='actor_snapshots', action='store_true', default=False)
tools.add_argument('-sam', '--snapshot-all-messages', help='snapshot all messages',
                    dest='actor_snapshots_all', action='store_true', default=False)
tools.add_argument('-tas', '--test-snapshots', help='actor tracing with snapshots',
                    dest='test_actor_snapshots', action='store_true', default=False)
tools.add_argument('--coverage', help='determine SOMns code coverage and store in given file',
                   dest='coverage', default=None)
tools.add_argument('--java-coverage', help='determine Java code coverage and store in given file',
                   dest='java_coverage', default=None)
tools.add_argument('-kt', '--kompos-tracing', help='enable tracing of actor operations',
                   dest='kompos_tracing', action='store_true', default=False)

tools.add_argument('--async_stack_traces_structure', help='Show async stack traces in debugging through a separate structure',
dest='async_stack_traces_structure', default=False)
tools.add_argument('--async_stack_traces_method_cache', help='Show async stack traces in debugging through a separate structure and add a per method backpointer cache',
dest='async_stack_traces_method_cache', default=False)
tools.add_argument('--async_stack_traces_inline_cache', help='Show async stack traces in debugging through a separate structure and add a per send site cache',
dest='async_stack_traces_inline_cache', default=False)

parser.add_argument('-o', '--only', help='only compile give methods, comma separated list',
                    dest='only_compile', default=None)
parser.add_argument('-A', '--no-assert', help='execute with assertions disabled',
                    dest='assert_', action='store_false', default=True)
parser.add_argument('-B', '--no-background', help='disable background compilation',
                    dest='background_compilation', action='store_false', default=True)
parser.add_argument('-P', '--no-pinning', help='disable pinning of threads to cores',
                    dest='use_pinning', action='store_false', default=True)
parser.add_argument('-C', '--no-compilation', help='disable Truffle compilation',
                    dest='no_compilation', action='store_true', default=False)
parser.add_argument('-G', '--interpreter', help='run without Graal',
                    dest='interpreter', action='store_true', default=False)
parser.add_argument('-E', '--no-early-compilation', help='start compilation using default trigger values. SOMns triggers it earlier to make benchmarking faster',
                    dest='early_compilation', action='store_false', default=True)
parser.add_argument('-EG', '--no-embedded-graal', help='run without the embedded Graal. Settings like JVMCI_BIN and GRAAL_HOME are ignored as long as the embedded Graal is not disabled.',
                    dest='use_embedded_graal', action='store_false', default=True)
parser.add_argument('-LG', '--no-libgraal', help='run without using the embedded libgraal, which is a precompiled Graal',
                    dest='use_libgraal', action='store_false', default=True)
parser.add_argument('-X', '--java-interpreter', help='run without Graal, and only the Java interpreter',
                    dest='java_interpreter', action='store_true', default=False)
parser.add_argument('-T', '--no-trace', help='do not print truffle compilation info',
                    dest='no_trace', action='store_false', default=True)
parser.add_argument('--no-graph-pe', help='disable Graph PE',
                    dest='graph_pe', action='store_false', default=True)

parser.add_argument('-vv', '--verbose', action='store_true', default=False,
                    dest='verbose', help="print command-line before executing")
parser.add_argument('--print-graal-options', action='store_true', default=False,
                    dest='print_graal_options', help="print all Graal options")

parser.add_argument('-J', help="Java VM Argument prefix",
                    dest="java_args", action='append')
parser.add_argument('-D', help="define a Java property",
                    dest="java_properties", action='append')


parser.add_argument('-ac', '--ansi-coloring', help='Enable ANSI coloring for output from interpreter with true, or disable with false',
                    dest='use_ansi_coloring', action='store', default=hasattr(sys.stdout, 'isatty') and sys.stdout.isatty())

parser.add_argument('args', nargs=argparse.REMAINDER,
                    help='arguments passed to SOMns')

if len(sys.argv) < 2:
    parser.print_help()
    sys.exit(1)

args = parser.parse_args()

if args.dynamic_metrics:
    args.interpreter = True

if args.java_interpreter:
    args.interpreter = True

if args.interpreter:
    args.use_embedded_graal = False

# Handle executable names
if sys.argv[0].endswith('fast'):
    args.assert_ = False
    args.no_trace = True
if sys.argv[0].endswith('debug'):
    args.perf_warnings = True
    args.background_compilation = False
    args.use_libgraal = False

# Determine JVM to be used
java_bin = None

# try local JVMCI, which ant already needed
local_jvmci_bin = BASE_DIR + '/libs/jvmci'
if sys.platform == 'darwin':
  local_jvmci_bin += '/Contents/Home'
local_jvmci_bin += '/bin/java'
if os.path.isfile(local_jvmci_bin):
  java_bin = local_jvmci_bin

if not java_bin and JAVA_HOME:
  java_bin = JAVA_HOME + '/bin/java'

if not java_bin:
  java_bin = "java"

if args.use_embedded_graal:
  from subprocess import check_output, STDOUT, CalledProcessError
  try:
    libgraal_jdk_home = check_output(
      [BASE_DIR + '/libs/mx/mx', '--primary-suite-path', BASE_DIR + '/libs/truffle/vm', 'graalvm-home'],
      stderr=STDOUT,
      env = {
        'JAVA_HOME':            java_bin.replace('/bin/java', ''),
        'PATH':                 os.getenv('PATH',  ''),
        # REM: This needs to match build.xml:libgraal-jdk
        'DYNAMIC_IMPORTS':      '/substratevm,/tools,/truffle,/sdk,/compiler',
        'FORCE_BASH_LAUNCHERS': 'true',
        'DISABLE_LIBPOLYGLOT':  'true',
        'EXCLUDE_COMPONENTS':   'svmag,nju,nic,ni,nil,ins,dap,lsp,insight,insightheap,vvm'
      })
    java_bin = libgraal_jdk_home.strip() + '/bin/java'
  except CalledProcessError as e:
    print "Failed to determine location of libgraal"
    print e.output
    sys.exit(1)
else:
  if JVMCI_BIN:
    java_bin = JVMCI_BIN
  if not java_bin and GRAAL_HOME and os.path.isfile(GRAAL_HOME + '/bin/java'):
    java_bin = GRAAL_HOME + '/bin/java'

##
## Defining Necessary Parameter Bits
##

classpath = (BASE_DIR + '/build/classes:'
           + BASE_DIR + '/libs/black-diamonds/build/classes:'
           + BASE_DIR + '/libs/somns-deps.jar:'
           + BASE_DIR + '/libs/affinity.jar:'
           + BASE_DIR + '/libs/slf4j-api.jar:'
           + BASE_DIR + '/libs/slf4j-simple.jar:'
           + BASE_DIR + '/libs/jna-platform.jar:'
           + BASE_DIR + '/libs/jna.jar:'
           + TRUFFLE_DIR + '/sdk/mxbuild/dists/graal-sdk.jar:'
           + TRUFFLE_DIR + '/truffle/mxbuild/dists/truffle-api.jar')

TRUFFLE_API_CLASSPATH = (
    TRUFFLE_DIR + '/truffle/mxbuild/dists/truffle-api.jar')

if args.use_libgraal:
  GRAAL_JVMCI_FLAGS = ['-XX:+UnlockExperimentalVMOptions', '-XX:+EnableJVMCI', '-XX:+UseJVMCICompiler', '-XX:+UseJVMCINativeLibrary']
else:
  GRAAL_JVMCI_FLAGS = ['-XX:+UnlockExperimentalVMOptions', '-XX:+EnableJVMCI', '-XX:+UseJVMCICompiler', '-XX:-UseJVMCINativeLibrary']


GRAAL_TRUFFLE_FLAGS = [
  '--module-path=' + TRUFFLE_DIR + '/sdk/mxbuild/dists/graal-sdk.jar:' +
      TRUFFLE_DIR + '/truffle/mxbuild/dists/truffle-api.jar'
]

if not args.interpreter:
  GRAAL_TRUFFLE_FLAGS.append('--upgrade-module-path=' + TRUFFLE_DIR + '/compiler/mxbuild/dists/graal-truffle-compiler-libgraal.jar')

ADD_OPEN_FLAGS = [
  '--add-opens=org.graalvm.truffle/com.oracle.truffle.api=ALL-UNNAMED',
  '--add-opens=org.graalvm.truffle/com.oracle.truffle.api.interop=ALL-UNNAMED',
  '--add-opens=org.graalvm.truffle/com.oracle.truffle.api.nodes=ALL-UNNAMED'
]

SOM_ARGS = ['-Dbd.settings=som.vm.VmSettings', 'som.Launcher',
            '--platform', args.som_platform, '--kernel', args.som_kernel]

# == Compiler Settings
TWEAK_INLINING = ['-Dpolyglot.engine.CompilationThreshold=191',
                  '-Dpolyglot.engine.InliningMaxCallerSize=10000',
                  '-Dpolyglot.engine.SplittingMaxCalleeSize=100000']

JAVA_ARGS = ['-server', '-XX:+UseThreadPriorities', '-XX:+UseParallelGC']

##
## Processing Parameters and Assembling Command Line
##

if not args.interpreter and GRAAL_FLAGS:
    flags = shlex.split(str.strip(GRAAL_FLAGS))
else:
    flags = []

flags += GRAAL_TRUFFLE_FLAGS

if args.interpreter:
    flags += ['-Dtruffle.TruffleRuntime=com.oracle.truffle.api.impl.DefaultTruffleRuntime',
              '-Dpolyglot.engine.WarnInterpreterOnly=false']
else:
  flags += GRAAL_JVMCI_FLAGS + ADD_OPEN_FLAGS
  flags += ['-Dpolyglot.engine.CompilationFailureAction=ExitVM',
            '-Dpolyglot.engine.MultiTier=false']
  if args.early_compilation:
    flags += ['-Dpolyglot.engine.DynamicCompilationThresholds=false',
              '-Dpolyglot.engine.SingleTierCompilationThreshold=25',
              '-Dpolyglot.engine.OSRCompilationThreshold=1000']

if args.som_dnu:
    flags += ['-Dsom.printStackTraceOnDNU=true']

if args.use_ansi_coloring:
    flags += ['-Dsom.useAnsiColoring=' + str(args.use_ansi_coloring).lower()]

if args.only_igv:
    args.igv = True

if args.debug:
    flags += ['-Xdebug',
              '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000']
if not args.interpreter and (args.igv or args.igv_to_file):
    flags += ['-Dgraal.Dump=Truffle,TruffleTree:2']
if not args.interpreter and args.only_igv:
    flags += ['-Dpolyglot.engine.MethodFilter=' + args.only_igv]
if not args.interpreter and args.igv_to_file:
    flags += ['-Dpolyglot.engine.PrintIdealGraphFile=true']
if args.low_level:
    flags += ['-XX:+UnlockDiagnosticVMOptions', '-XX:+LogCompilation',
              '-XX:+TraceDeoptimization']
if not args.interpreter and (args.graal_profile or args.graal_profile_allocations or args.graal_profile_timed):
    flags += ['-XX:JVMCICounterSize=5000', '-Dpolyglot.engine.ProfileCompiledMethods=true',
              '-DProfileCompiledMethodsPhase.WITH_SECTION_HEADER=true']
    if args.graal_profile_allocations:
        flags += ['-Dpolyglot.engine.ProfileAllocations=true']
    if args.graal_profile_timed:
        flags += ['-Dpolyglot.engine.TimedDynamicCounters=1000']
    if args.graal_profile:
        flags += ['-Dpolyglot.engine.BenchmarkDynamicCounters=out,completed,total']

if not args.interpreter and args.graal_branch_profile:
    flags += ['-Dpolyglot.engine.InstrumentBranches=true',
              '-Dpolyglot.engine.InstrumentBranchesFilter=*',
              '-Dpolyglot.engine.InstrumentBranchesPerInlineSite=true']

if args.truffle_profile:
    flags += ['-Dtruffle.profiling.enabled=true']
    SOM_ARGS += ['--profile']

if args.coverage:
    SOM_ARGS += ['--coverage', args.coverage]
    
if args.async_stack_traces_structure:
	flags += ['-Dsom.actorAsyncStackTraceStructure=true']	
if args.async_stack_traces_method_cache:
	flags += ['-Dsom.actorAsyncStackTraceMethodCache=true']
if args.async_stack_traces_inline_cache:
	flags += ['-Dsom.actorAsyncStackTraceInlineCache=true']

if args.java_coverage:
    flags += ['-javaagent:' + BASE_DIR + '/libs/jacoco/lib/jacocoagent.jar=inclbootstrapclasses=true,destfile=' + args.java_coverage]

if args.web_debugger:
    SOM_ARGS += ['--web-debug']
if args.dynamic_metrics:
    flags += ['-Dsom.dynamicMetrics=true']
if args.si_candidates:
    SOM_ARGS += ['--si-candidates']
if args.vmdebug:
    flags += ['-Dsom.debugMode=true']

if args.actor_tracing:
    flags += ['-Dsom.actorTracing=true']
if args.actor_receiver_tracing:
    flags += ['-Dsom.actorReceiverTracing=true']
if args.kompos_tracing:
    flags += ['-Dsom.komposTracing=true']
if args.small_ids:
    flags += ['-Dsom.smallIds=true']
if args.trace_file:
    flags += ['-Dsom.traceFile=%s' % args.trace_file ]
if args.memory_tracing:
    flags += ['-Dsom.memoryTracing=true']
if args.disable_trace_file:
    flags += ['-Dsom.disableTraceFile=true']
if args.replay:
    flags += ['-Dsom.replay=true']
if args.buffer_recycling:
    flags += ['-Dsom.bufferRecycling=false']
if args.buffer_size:
    flags += ['-Dsom.buffSize=%s' % args.buffer_size ]
if args.buffer_size:
    flags += ['-Dsom.buffDelay=%s' % args.buffer_delay ]
if args.buffers_per_thread:
    flags += ['-Dsom.buffPerThread=%s' % args.buffers_per_thread ]
if args.test_actor_snapshots:
    flags += ['-Dsom.snapshotTest=true']
if args.actor_snapshots:
    flags += ['-Dsom.actorSnapshot=true']
if args.actor_snapshots_all:
    flags += ['-Dsom.actorSnapshotAll=true']

if (args.truffle_profile or args.web_debugger or
    args.dynamic_metrics or args.coverage or args.si_candidates):
    flags += ['-Dsom.instrumentation=true']

if args.web_debugger:
    flags += ['-Dsom.truffleDebugger=true']

if args.assisted_debugging:
    flags += ['-Dsom.assistedDebugging=true']

if args.assisted_debugging_breakpoints:
    flags += ['-Dsom.assistedDebugging=true']
if args.assisted_debugging_breakpoints:
    flags += ['-Dsom.assistedDebuggingBp=%s' % args.assisted_debugging_breakpoints ]

if not args.interpreter and args.perf_warnings:
    flags += ['-Dpolyglot.engine.CompilationExceptionsAreFatal=true',
              '-Dpolyglot.engine.TracePerformanceWarnings=all',
              '-Dpolyglot.engine.TraceCompilation=true',
              '-Dpolyglot.engine.TraceCompilationDetails=true']
if not args.fail_missing_opts:
    flags += ['-DfailOnMissingOptimization=true']
if not args.interpreter and args.trace_invalidation:
    flags += ['-Dpolyglot.engine.TraceTransferToInterpreter=true',
              '-Dpolyglot.engine.TraceAssumptions=true']
if not args.interpreter and args.only_compile:
    flags.append("-Dpolyglot.engine.CompileOnly=%s" % args.only_compile)
if args.visual_vm:
    flags += ['-agentpath:/Users/smarr/Downloads/visualvm_143/profiler/lib/deployed/jdk16/mac/libprofilerinterface.jnilib=/Users/smarr/Downloads/visualvm_143/profiler/lib,5140']
if args.assert_:
    flags += ['-esa', '-ea']
else:
    flags += ['-dsa', '-da']
if not args.interpreter and not args.background_compilation:
    flags += ['-Dpolyglot.engine.BackgroundCompilation=false']
if not args.interpreter and args.no_compilation:
    flags.append('-Dpolyglot.engine.CompileOnly=__FAKE_METHOD_NON_EXISTING__')
if not args.interpreter and args.no_trace and not args.perf_warnings:
    flags += ['-Dpolyglot.engine.TraceInlining=false', '-Dpolyglot.engine.TraceCompilation=false']
if not args.interpreter and not args.graph_pe:
    flags += ['-Dpolyglot.engine.GraphPE=false']
if args.threads:
    flags += ['-Dsom.threads=%s' % args.threads ]
if args.java_interpreter:
    flags += ['-Xint']
if args.print_graal_options:
    flags += ['-XX:+JVMCIPrintProperties']

if args.java_properties:
    flags += ['-D' + property for property in args.java_properties]

if args.java_args:
    JAVA_ARGS += ['-' + property for property in args.java_args]

flags += ['-Dsom.tools=' + BASE_DIR + '/tools']
flags += ['-Dsom.baseDir=' + BASE_DIR]

if not args.interpreter:
  flags += ['-Dpolyglot.engine.CompilerThreads=0']

if args.use_pinning:
  ## check whether there are any known restrictions to core usage
  ## that needs to be considered for pinning
  core_set = os.environ.get('REBENCH_DENOISE_CORE_SET', None)
  if core_set:
    ## calculate the mask for cores, as hexadecimal representation
    core_set = core_set.split("-")
    core_set[0] = int(core_set[0])
    core_set[1] = int(core_set[1])
    bit_mask = 0
    for c in range(core_set[0], core_set[1] + 1):
      bit_mask += 1 << c
    flags += ['-Daffinity.reserved=' + hex(bit_mask).lstrip("0x")]
else:
  flags += ['-Dsom.usePinning=false']
flags += ['-Dorg.slf4j.simpleLogger.defaultLogLevel=off']

all_args = JAVA_ARGS + ['-classpath', classpath, '-Dtruffle.class.path.append=' + classpath] + flags + SOM_ARGS + args.args

if args.verbose:
    print "CMD: " + java_bin + ' ' + ' '.join(all_args)

env = dict(os.environ)
env['JVMCI_VERSION_CHECK'] = 'ignore'

try:
  os.execvpe(java_bin, all_args, env)
except OSError as e:
  if e.errno == 2 and e.strerror == "No such file or directory":
    print("Could not find JVM: " + java_bin)
    sys.exit(1)
